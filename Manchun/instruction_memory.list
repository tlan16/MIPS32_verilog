0
0
0
0
@4	//multi:
8caa0000	//lw $10,0($5)
0
0
0
8ccb0000	//lw $11,0($6)
0
0
0
014b6021	//mul $12,$10,$11
0
0
0
018d6820	//add $13,$12,$13
0
0
0
00252820	//add $5,$1,$5
0
0
0
00463020	//add $6,$2,$6
0
0
0
002e7020	//add $14,$1,$14
0
0
0	
11c20001	//beq $14,$2,4
0
0
0
08000001	//j multi
0
0
0
08000020	//j switch_d

@80	// switch_d:
aced0000	//sw $13,0($7)
0
0
0
00273820	//add $7,$1,$7
0
0
0
00a22822	//sub $5,$5,$2
0
0
0
00c43022	//sub $6,$6,$4
0
0
0
00006824	//and $13,$0,$0
0
0
0
000e7024	//and $14,$0,$14
0
0
0
002f7820	//add $15,$1,$15
0
0
0	
11e20001	//beq $15,$2,4
0
0
0
08000001	//j multi
0
0
0
08000030	//j switch_c

@C0	//switch_c:
00308020	//add $16,$1,$16
0
0
0
00452820	//add $5,$2,$5
0
0
0
02313024	//and $6,$17,$17
0
0
0
00007824	//and $15,$0,$0
0
0
0
12020001	//beq $16,$2,4
0
0
0
08000001	//j multi
0
0
0
080000FF	//j exit

@FF	//exit:
1000fffe	//beq $0,$0,-4

/* old code
@40	// multi:
8caa0000	//lw $10,0($5)
0
0
0
8ccb0000 //lw $11,0($6)
0
0
0
014b6021	//mul.s $12,$10,$11	
			//homemade instruction use addu opcode
0
0
0
018d6820 //add $13,$12,$13
0
0
0
00252820 //add $5,$1,$5
0
0
0
00463020	//add $6,$2,$6
0
0
0
002e7020 //$14,$1,$14
0
0
0
08000001 // j loop


@80  //switch_d:
aced0000		//sw $13,0($7)
0
0
0
00273820		//add $7,$1,$7
0
0
0
00a32822		//sub $5,$5,$3
0
0
0
00c43022		//sub $6,$6,$4
0
0
0
000e7024		//and $14,$0,$14
0
0
0
002f7820		//add $15,$1,$15
0
0
0
08000010		//j multi


@C0	//switch_c:
00308020	//add $16,$1,$16
0
0
0
00252820	//add $5,$1,$5
0
0
0
02024021	//mul $8,$16,$2
0
0
0
01288820	//add $17,$9,$8
0
0
0
00113025	//or$ $6,$0,$17
0
0
0
08000010	//j multi









*/







/*

//Comments are allowed // This is in HEX
@4
8C410004		//lw  $1,4($2), $1=6

@8
00252022		//sub $4,$1,$5, $4=6-5=1

@C
00273024		//and $6,$1,$7, 110 & 111=110

@10
00294025		//or $8,$1,$9, 0110 || 1001 = 1111

@14
00220820		//add R1, R1, R2
//00221820		//add R3, R1, R2

@18
10C10008		//beq $6, $1, 8

@1C
00221820		//add R3, R1, R2

@20
08000010		// j to 40

@24
00220820

@40
00220821

@44
00220821

@48
00220821

@4c
00220821


//Comments are allowed // This is in HEX
@4
00220821		//addu R1, R1, R2
				// in our code, addu is a dummy of multiply
				// This just save our time to convert every thing to mechine code
@8
00220821

@C
00220821		//add R1, R1, R2

@10
00220821

@14
00220821

@18
00220820

@1C
00220820
*/