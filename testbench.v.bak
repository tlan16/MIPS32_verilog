module testbench;
reg Clk=0;

  wire [31:0]   PC_Plus_4_IF;
  wire [31:0]   Instruction_IF;
  wire [31:0] 	Next_PC_IF;
  wire				PC_Enable;

  wire 			RegDst_ID;
  wire	[1:0]		ALUOp_ID;
  wire 			ALUSrc_ID;
  wire				Branch_ID;
  wire				MemRead_ID;
  wire				MemWrite_ID;
  wire				RegWrite_ID;
  wire				MemtoReg_ID;
  wire [31:0] 	Sign_Extend_Instruction_ID;
  wire				ID_Control_NOP;
  wire [1:0]		ID_Register_Write_to_Read;
  wire				Comparetor_ID;
  
  wire [1:0]		ForwardA_EX;
  wire [1:0]		ForwardB_EX;
  wire				Forward_Mem_to_Mem;
  wire				ForwardC;
  wire				ForwardD;
  wire [31:0]	ALU_Data_2_EX;
  wire [3:0]		ALU_Control_EX;
  wire [31:0]	ALU_Result_EX;
  wire [31:0]	Branch_Dest_EX;
  wire [4:0]		Write_Register_EX;
  wire 			Zero_EX;
  
  wire [31:0]	Read_Data_MEM;
  wire				PCSrc_MEM;
  wire [31:0]	Write_Data_MUX_MEM;

  wire [31:0]	ALU_Result_WB;

MIPS32(
		Clk,
		
	PC_Plus_4_IF,
	Instruction_IF,
		Next_PC_IF,
					PC_Enable,

				RegDst_ID,
			ALUOp_ID,
				ALUSrc_ID,
					Branch_ID,
					MemRead_ID,
					MemWrite_ID,
					RegWrite_ID,
					MemtoReg_ID,
		Sign_Extend_Instruction_ID,
					ID_Control_NOP,
ID_Register_Write_to_Read,
					Comparetor_ID,
	
ForwardA_EX,
ForwardB_EX,
					Forward_Mem_to_Mem,
					ForwardC,
					ForwardD,
		ALU_Data_2_EX,
ALU_Control_EX,
		ALU_Result_EX,
		Branch_Dest_EX,
			Write_Register_EX,
				Zero_EX,

		Read_Data_MEM,
					PCSrc_MEM,
		Write_Data_MUX_MEM,

		ALU_Result_WB

	
		);
		
always begin
	#80 Clk<=!Clk;
	end

	initial begin
	#5000 $stop;
	end
	
	