// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/22/2014 14:46:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPS32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS32_vlg_sample_tst(
	Branch_Dest_MEM,
	CLOCK_50,
	PCSrc_MEM,
	RegWrite_WB,
	Write_Data_WB,
	Write_Register_WB,
	sampler_tx
);
input [31:0] Branch_Dest_MEM;
input  CLOCK_50;
input  PCSrc_MEM;
input  RegWrite_WB;
input [31:0] Write_Data_WB;
input [4:0] Write_Register_WB;
output sampler_tx;

reg sample;
time current_time;
always @(Branch_Dest_MEM or CLOCK_50 or PCSrc_MEM or RegWrite_WB or Write_Data_WB or Write_Register_WB)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIPS32_vlg_check_tst (
	ALUOp_EX,
	ALUSrc_EX,
	Branch_EX,
	Instruction_EX,
	MemRead_EX,
	MemWrite_EX,
	MemtoReg_EX,
	PC_Plus_4_EX,
	Read_Data_1_EX,
	Read_Data_2_EX,
	RegDst_EX,
	RegWrite_EX,
	Sign_Extend_Instruction_EX,
	sampler_rx
);
input [1:0] ALUOp_EX;
input  ALUSrc_EX;
input  Branch_EX;
input [31:0] Instruction_EX;
input  MemRead_EX;
input  MemWrite_EX;
input  MemtoReg_EX;
input [31:0] PC_Plus_4_EX;
input [31:0] Read_Data_1_EX;
input [31:0] Read_Data_2_EX;
input  RegDst_EX;
input  RegWrite_EX;
input [31:0] Sign_Extend_Instruction_EX;
input sampler_rx;

reg [1:0] ALUOp_EX_expected;
reg  ALUSrc_EX_expected;
reg  Branch_EX_expected;
reg [31:0] Instruction_EX_expected;
reg  MemRead_EX_expected;
reg  MemWrite_EX_expected;
reg  MemtoReg_EX_expected;
reg [31:0] PC_Plus_4_EX_expected;
reg [31:0] Read_Data_1_EX_expected;
reg [31:0] Read_Data_2_EX_expected;
reg  RegDst_EX_expected;
reg  RegWrite_EX_expected;
reg [31:0] Sign_Extend_Instruction_EX_expected;

reg [1:0] ALUOp_EX_prev;
reg  ALUSrc_EX_prev;
reg  Branch_EX_prev;
reg [31:0] Instruction_EX_prev;
reg  MemRead_EX_prev;
reg  MemWrite_EX_prev;
reg  MemtoReg_EX_prev;
reg [31:0] PC_Plus_4_EX_prev;
reg [31:0] Read_Data_1_EX_prev;
reg [31:0] Read_Data_2_EX_prev;
reg  RegDst_EX_prev;
reg  RegWrite_EX_prev;
reg [31:0] Sign_Extend_Instruction_EX_prev;

reg [1:0] ALUOp_EX_expected_prev;
reg  ALUSrc_EX_expected_prev;
reg  Branch_EX_expected_prev;
reg [31:0] Instruction_EX_expected_prev;
reg  MemRead_EX_expected_prev;
reg  MemWrite_EX_expected_prev;
reg  MemtoReg_EX_expected_prev;
reg [31:0] PC_Plus_4_EX_expected_prev;
reg [31:0] Read_Data_1_EX_expected_prev;
reg [31:0] Read_Data_2_EX_expected_prev;
reg  RegDst_EX_expected_prev;
reg  RegWrite_EX_expected_prev;
reg [31:0] Sign_Extend_Instruction_EX_expected_prev;

reg [1:0] last_ALUOp_EX_exp;
reg  last_ALUSrc_EX_exp;
reg  last_Branch_EX_exp;
reg [31:0] last_Instruction_EX_exp;
reg  last_MemRead_EX_exp;
reg  last_MemWrite_EX_exp;
reg  last_MemtoReg_EX_exp;
reg [31:0] last_PC_Plus_4_EX_exp;
reg [31:0] last_Read_Data_1_EX_exp;
reg [31:0] last_Read_Data_2_EX_exp;
reg  last_RegDst_EX_exp;
reg  last_RegWrite_EX_exp;
reg [31:0] last_Sign_Extend_Instruction_EX_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUOp_EX_prev = ALUOp_EX;
	ALUSrc_EX_prev = ALUSrc_EX;
	Branch_EX_prev = Branch_EX;
	Instruction_EX_prev = Instruction_EX;
	MemRead_EX_prev = MemRead_EX;
	MemWrite_EX_prev = MemWrite_EX;
	MemtoReg_EX_prev = MemtoReg_EX;
	PC_Plus_4_EX_prev = PC_Plus_4_EX;
	Read_Data_1_EX_prev = Read_Data_1_EX;
	Read_Data_2_EX_prev = Read_Data_2_EX;
	RegDst_EX_prev = RegDst_EX;
	RegWrite_EX_prev = RegWrite_EX;
	Sign_Extend_Instruction_EX_prev = Sign_Extend_Instruction_EX;
end

// update expected /o prevs

always @(trigger)
begin
	ALUOp_EX_expected_prev = ALUOp_EX_expected;
	ALUSrc_EX_expected_prev = ALUSrc_EX_expected;
	Branch_EX_expected_prev = Branch_EX_expected;
	Instruction_EX_expected_prev = Instruction_EX_expected;
	MemRead_EX_expected_prev = MemRead_EX_expected;
	MemWrite_EX_expected_prev = MemWrite_EX_expected;
	MemtoReg_EX_expected_prev = MemtoReg_EX_expected;
	PC_Plus_4_EX_expected_prev = PC_Plus_4_EX_expected;
	Read_Data_1_EX_expected_prev = Read_Data_1_EX_expected;
	Read_Data_2_EX_expected_prev = Read_Data_2_EX_expected;
	RegDst_EX_expected_prev = RegDst_EX_expected;
	RegWrite_EX_expected_prev = RegWrite_EX_expected;
	Sign_Extend_Instruction_EX_expected_prev = Sign_Extend_Instruction_EX_expected;
end


// expected PC_Plus_4_EX[ 31 ]
initial
begin
	PC_Plus_4_EX_expected[31] = 1'bX;
end 
// expected PC_Plus_4_EX[ 30 ]
initial
begin
	PC_Plus_4_EX_expected[30] = 1'bX;
end 
// expected PC_Plus_4_EX[ 29 ]
initial
begin
	PC_Plus_4_EX_expected[29] = 1'bX;
end 
// expected PC_Plus_4_EX[ 28 ]
initial
begin
	PC_Plus_4_EX_expected[28] = 1'bX;
end 
// expected PC_Plus_4_EX[ 27 ]
initial
begin
	PC_Plus_4_EX_expected[27] = 1'bX;
end 
// expected PC_Plus_4_EX[ 26 ]
initial
begin
	PC_Plus_4_EX_expected[26] = 1'bX;
end 
// expected PC_Plus_4_EX[ 25 ]
initial
begin
	PC_Plus_4_EX_expected[25] = 1'bX;
end 
// expected PC_Plus_4_EX[ 24 ]
initial
begin
	PC_Plus_4_EX_expected[24] = 1'bX;
end 
// expected PC_Plus_4_EX[ 23 ]
initial
begin
	PC_Plus_4_EX_expected[23] = 1'bX;
end 
// expected PC_Plus_4_EX[ 22 ]
initial
begin
	PC_Plus_4_EX_expected[22] = 1'bX;
end 
// expected PC_Plus_4_EX[ 21 ]
initial
begin
	PC_Plus_4_EX_expected[21] = 1'bX;
end 
// expected PC_Plus_4_EX[ 20 ]
initial
begin
	PC_Plus_4_EX_expected[20] = 1'bX;
end 
// expected PC_Plus_4_EX[ 19 ]
initial
begin
	PC_Plus_4_EX_expected[19] = 1'bX;
end 
// expected PC_Plus_4_EX[ 18 ]
initial
begin
	PC_Plus_4_EX_expected[18] = 1'bX;
end 
// expected PC_Plus_4_EX[ 17 ]
initial
begin
	PC_Plus_4_EX_expected[17] = 1'bX;
end 
// expected PC_Plus_4_EX[ 16 ]
initial
begin
	PC_Plus_4_EX_expected[16] = 1'bX;
end 
// expected PC_Plus_4_EX[ 15 ]
initial
begin
	PC_Plus_4_EX_expected[15] = 1'bX;
end 
// expected PC_Plus_4_EX[ 14 ]
initial
begin
	PC_Plus_4_EX_expected[14] = 1'bX;
end 
// expected PC_Plus_4_EX[ 13 ]
initial
begin
	PC_Plus_4_EX_expected[13] = 1'bX;
end 
// expected PC_Plus_4_EX[ 12 ]
initial
begin
	PC_Plus_4_EX_expected[12] = 1'bX;
end 
// expected PC_Plus_4_EX[ 11 ]
initial
begin
	PC_Plus_4_EX_expected[11] = 1'bX;
end 
// expected PC_Plus_4_EX[ 10 ]
initial
begin
	PC_Plus_4_EX_expected[10] = 1'bX;
end 
// expected PC_Plus_4_EX[ 9 ]
initial
begin
	PC_Plus_4_EX_expected[9] = 1'bX;
end 
// expected PC_Plus_4_EX[ 8 ]
initial
begin
	PC_Plus_4_EX_expected[8] = 1'bX;
end 
// expected PC_Plus_4_EX[ 7 ]
initial
begin
	PC_Plus_4_EX_expected[7] = 1'bX;
end 
// expected PC_Plus_4_EX[ 6 ]
initial
begin
	PC_Plus_4_EX_expected[6] = 1'bX;
end 
// expected PC_Plus_4_EX[ 5 ]
initial
begin
	PC_Plus_4_EX_expected[5] = 1'bX;
end 
// expected PC_Plus_4_EX[ 4 ]
initial
begin
	PC_Plus_4_EX_expected[4] = 1'bX;
end 
// expected PC_Plus_4_EX[ 3 ]
initial
begin
	PC_Plus_4_EX_expected[3] = 1'bX;
end 
// expected PC_Plus_4_EX[ 2 ]
initial
begin
	PC_Plus_4_EX_expected[2] = 1'bX;
end 
// expected PC_Plus_4_EX[ 1 ]
initial
begin
	PC_Plus_4_EX_expected[1] = 1'bX;
end 
// expected PC_Plus_4_EX[ 0 ]
initial
begin
	PC_Plus_4_EX_expected[0] = 1'bX;
end 
// expected Instruction_EX[ 31 ]
initial
begin
	Instruction_EX_expected[31] = 1'bX;
end 
// expected Instruction_EX[ 30 ]
initial
begin
	Instruction_EX_expected[30] = 1'bX;
end 
// expected Instruction_EX[ 29 ]
initial
begin
	Instruction_EX_expected[29] = 1'bX;
end 
// expected Instruction_EX[ 28 ]
initial
begin
	Instruction_EX_expected[28] = 1'bX;
end 
// expected Instruction_EX[ 27 ]
initial
begin
	Instruction_EX_expected[27] = 1'bX;
end 
// expected Instruction_EX[ 26 ]
initial
begin
	Instruction_EX_expected[26] = 1'bX;
end 
// expected Instruction_EX[ 25 ]
initial
begin
	Instruction_EX_expected[25] = 1'bX;
end 
// expected Instruction_EX[ 24 ]
initial
begin
	Instruction_EX_expected[24] = 1'bX;
end 
// expected Instruction_EX[ 23 ]
initial
begin
	Instruction_EX_expected[23] = 1'bX;
end 
// expected Instruction_EX[ 22 ]
initial
begin
	Instruction_EX_expected[22] = 1'bX;
end 
// expected Instruction_EX[ 21 ]
initial
begin
	Instruction_EX_expected[21] = 1'bX;
end 
// expected Instruction_EX[ 20 ]
initial
begin
	Instruction_EX_expected[20] = 1'bX;
end 
// expected Instruction_EX[ 19 ]
initial
begin
	Instruction_EX_expected[19] = 1'bX;
end 
// expected Instruction_EX[ 18 ]
initial
begin
	Instruction_EX_expected[18] = 1'bX;
end 
// expected Instruction_EX[ 17 ]
initial
begin
	Instruction_EX_expected[17] = 1'bX;
end 
// expected Instruction_EX[ 16 ]
initial
begin
	Instruction_EX_expected[16] = 1'bX;
end 
// expected Instruction_EX[ 15 ]
initial
begin
	Instruction_EX_expected[15] = 1'bX;
end 
// expected Instruction_EX[ 14 ]
initial
begin
	Instruction_EX_expected[14] = 1'bX;
end 
// expected Instruction_EX[ 13 ]
initial
begin
	Instruction_EX_expected[13] = 1'bX;
end 
// expected Instruction_EX[ 12 ]
initial
begin
	Instruction_EX_expected[12] = 1'bX;
end 
// expected Instruction_EX[ 11 ]
initial
begin
	Instruction_EX_expected[11] = 1'bX;
end 
// expected Instruction_EX[ 10 ]
initial
begin
	Instruction_EX_expected[10] = 1'bX;
end 
// expected Instruction_EX[ 9 ]
initial
begin
	Instruction_EX_expected[9] = 1'bX;
end 
// expected Instruction_EX[ 8 ]
initial
begin
	Instruction_EX_expected[8] = 1'bX;
end 
// expected Instruction_EX[ 7 ]
initial
begin
	Instruction_EX_expected[7] = 1'bX;
end 
// expected Instruction_EX[ 6 ]
initial
begin
	Instruction_EX_expected[6] = 1'bX;
end 
// expected Instruction_EX[ 5 ]
initial
begin
	Instruction_EX_expected[5] = 1'bX;
end 
// expected Instruction_EX[ 4 ]
initial
begin
	Instruction_EX_expected[4] = 1'bX;
end 
// expected Instruction_EX[ 3 ]
initial
begin
	Instruction_EX_expected[3] = 1'bX;
end 
// expected Instruction_EX[ 2 ]
initial
begin
	Instruction_EX_expected[2] = 1'bX;
end 
// expected Instruction_EX[ 1 ]
initial
begin
	Instruction_EX_expected[1] = 1'bX;
end 
// expected Instruction_EX[ 0 ]
initial
begin
	Instruction_EX_expected[0] = 1'bX;
end 

// expected RegDst_EX
initial
begin
	RegDst_EX_expected = 1'bX;
end 
// expected ALUOp_EX[ 1 ]
initial
begin
	ALUOp_EX_expected[1] = 1'bX;
end 
// expected ALUOp_EX[ 0 ]
initial
begin
	ALUOp_EX_expected[0] = 1'bX;
end 

// expected ALUSrc_EX
initial
begin
	ALUSrc_EX_expected = 1'bX;
end 

// expected Branch_EX
initial
begin
	Branch_EX_expected = 1'bX;
end 

// expected MemRead_EX
initial
begin
	MemRead_EX_expected = 1'bX;
end 

// expected MemWrite_EX
initial
begin
	MemWrite_EX_expected = 1'bX;
end 

// expected RegWrite_EX
initial
begin
	RegWrite_EX_expected = 1'bX;
end 

// expected MemtoReg_EX
initial
begin
	MemtoReg_EX_expected = 1'bX;
end 
// expected Read_Data_1_EX[ 31 ]
initial
begin
	Read_Data_1_EX_expected[31] = 1'bX;
end 
// expected Read_Data_1_EX[ 30 ]
initial
begin
	Read_Data_1_EX_expected[30] = 1'bX;
end 
// expected Read_Data_1_EX[ 29 ]
initial
begin
	Read_Data_1_EX_expected[29] = 1'bX;
end 
// expected Read_Data_1_EX[ 28 ]
initial
begin
	Read_Data_1_EX_expected[28] = 1'bX;
end 
// expected Read_Data_1_EX[ 27 ]
initial
begin
	Read_Data_1_EX_expected[27] = 1'bX;
end 
// expected Read_Data_1_EX[ 26 ]
initial
begin
	Read_Data_1_EX_expected[26] = 1'bX;
end 
// expected Read_Data_1_EX[ 25 ]
initial
begin
	Read_Data_1_EX_expected[25] = 1'bX;
end 
// expected Read_Data_1_EX[ 24 ]
initial
begin
	Read_Data_1_EX_expected[24] = 1'bX;
end 
// expected Read_Data_1_EX[ 23 ]
initial
begin
	Read_Data_1_EX_expected[23] = 1'bX;
end 
// expected Read_Data_1_EX[ 22 ]
initial
begin
	Read_Data_1_EX_expected[22] = 1'bX;
end 
// expected Read_Data_1_EX[ 21 ]
initial
begin
	Read_Data_1_EX_expected[21] = 1'bX;
end 
// expected Read_Data_1_EX[ 20 ]
initial
begin
	Read_Data_1_EX_expected[20] = 1'bX;
end 
// expected Read_Data_1_EX[ 19 ]
initial
begin
	Read_Data_1_EX_expected[19] = 1'bX;
end 
// expected Read_Data_1_EX[ 18 ]
initial
begin
	Read_Data_1_EX_expected[18] = 1'bX;
end 
// expected Read_Data_1_EX[ 17 ]
initial
begin
	Read_Data_1_EX_expected[17] = 1'bX;
end 
// expected Read_Data_1_EX[ 16 ]
initial
begin
	Read_Data_1_EX_expected[16] = 1'bX;
end 
// expected Read_Data_1_EX[ 15 ]
initial
begin
	Read_Data_1_EX_expected[15] = 1'bX;
end 
// expected Read_Data_1_EX[ 14 ]
initial
begin
	Read_Data_1_EX_expected[14] = 1'bX;
end 
// expected Read_Data_1_EX[ 13 ]
initial
begin
	Read_Data_1_EX_expected[13] = 1'bX;
end 
// expected Read_Data_1_EX[ 12 ]
initial
begin
	Read_Data_1_EX_expected[12] = 1'bX;
end 
// expected Read_Data_1_EX[ 11 ]
initial
begin
	Read_Data_1_EX_expected[11] = 1'bX;
end 
// expected Read_Data_1_EX[ 10 ]
initial
begin
	Read_Data_1_EX_expected[10] = 1'bX;
end 
// expected Read_Data_1_EX[ 9 ]
initial
begin
	Read_Data_1_EX_expected[9] = 1'bX;
end 
// expected Read_Data_1_EX[ 8 ]
initial
begin
	Read_Data_1_EX_expected[8] = 1'bX;
end 
// expected Read_Data_1_EX[ 7 ]
initial
begin
	Read_Data_1_EX_expected[7] = 1'bX;
end 
// expected Read_Data_1_EX[ 6 ]
initial
begin
	Read_Data_1_EX_expected[6] = 1'bX;
end 
// expected Read_Data_1_EX[ 5 ]
initial
begin
	Read_Data_1_EX_expected[5] = 1'bX;
end 
// expected Read_Data_1_EX[ 4 ]
initial
begin
	Read_Data_1_EX_expected[4] = 1'bX;
end 
// expected Read_Data_1_EX[ 3 ]
initial
begin
	Read_Data_1_EX_expected[3] = 1'bX;
end 
// expected Read_Data_1_EX[ 2 ]
initial
begin
	Read_Data_1_EX_expected[2] = 1'bX;
end 
// expected Read_Data_1_EX[ 1 ]
initial
begin
	Read_Data_1_EX_expected[1] = 1'bX;
end 
// expected Read_Data_1_EX[ 0 ]
initial
begin
	Read_Data_1_EX_expected[0] = 1'bX;
end 
// expected Read_Data_2_EX[ 31 ]
initial
begin
	Read_Data_2_EX_expected[31] = 1'bX;
end 
// expected Read_Data_2_EX[ 30 ]
initial
begin
	Read_Data_2_EX_expected[30] = 1'bX;
end 
// expected Read_Data_2_EX[ 29 ]
initial
begin
	Read_Data_2_EX_expected[29] = 1'bX;
end 
// expected Read_Data_2_EX[ 28 ]
initial
begin
	Read_Data_2_EX_expected[28] = 1'bX;
end 
// expected Read_Data_2_EX[ 27 ]
initial
begin
	Read_Data_2_EX_expected[27] = 1'bX;
end 
// expected Read_Data_2_EX[ 26 ]
initial
begin
	Read_Data_2_EX_expected[26] = 1'bX;
end 
// expected Read_Data_2_EX[ 25 ]
initial
begin
	Read_Data_2_EX_expected[25] = 1'bX;
end 
// expected Read_Data_2_EX[ 24 ]
initial
begin
	Read_Data_2_EX_expected[24] = 1'bX;
end 
// expected Read_Data_2_EX[ 23 ]
initial
begin
	Read_Data_2_EX_expected[23] = 1'bX;
end 
// expected Read_Data_2_EX[ 22 ]
initial
begin
	Read_Data_2_EX_expected[22] = 1'bX;
end 
// expected Read_Data_2_EX[ 21 ]
initial
begin
	Read_Data_2_EX_expected[21] = 1'bX;
end 
// expected Read_Data_2_EX[ 20 ]
initial
begin
	Read_Data_2_EX_expected[20] = 1'bX;
end 
// expected Read_Data_2_EX[ 19 ]
initial
begin
	Read_Data_2_EX_expected[19] = 1'bX;
end 
// expected Read_Data_2_EX[ 18 ]
initial
begin
	Read_Data_2_EX_expected[18] = 1'bX;
end 
// expected Read_Data_2_EX[ 17 ]
initial
begin
	Read_Data_2_EX_expected[17] = 1'bX;
end 
// expected Read_Data_2_EX[ 16 ]
initial
begin
	Read_Data_2_EX_expected[16] = 1'bX;
end 
// expected Read_Data_2_EX[ 15 ]
initial
begin
	Read_Data_2_EX_expected[15] = 1'bX;
end 
// expected Read_Data_2_EX[ 14 ]
initial
begin
	Read_Data_2_EX_expected[14] = 1'bX;
end 
// expected Read_Data_2_EX[ 13 ]
initial
begin
	Read_Data_2_EX_expected[13] = 1'bX;
end 
// expected Read_Data_2_EX[ 12 ]
initial
begin
	Read_Data_2_EX_expected[12] = 1'bX;
end 
// expected Read_Data_2_EX[ 11 ]
initial
begin
	Read_Data_2_EX_expected[11] = 1'bX;
end 
// expected Read_Data_2_EX[ 10 ]
initial
begin
	Read_Data_2_EX_expected[10] = 1'bX;
end 
// expected Read_Data_2_EX[ 9 ]
initial
begin
	Read_Data_2_EX_expected[9] = 1'bX;
end 
// expected Read_Data_2_EX[ 8 ]
initial
begin
	Read_Data_2_EX_expected[8] = 1'bX;
end 
// expected Read_Data_2_EX[ 7 ]
initial
begin
	Read_Data_2_EX_expected[7] = 1'bX;
end 
// expected Read_Data_2_EX[ 6 ]
initial
begin
	Read_Data_2_EX_expected[6] = 1'bX;
end 
// expected Read_Data_2_EX[ 5 ]
initial
begin
	Read_Data_2_EX_expected[5] = 1'bX;
end 
// expected Read_Data_2_EX[ 4 ]
initial
begin
	Read_Data_2_EX_expected[4] = 1'bX;
end 
// expected Read_Data_2_EX[ 3 ]
initial
begin
	Read_Data_2_EX_expected[3] = 1'bX;
end 
// expected Read_Data_2_EX[ 2 ]
initial
begin
	Read_Data_2_EX_expected[2] = 1'bX;
end 
// expected Read_Data_2_EX[ 1 ]
initial
begin
	Read_Data_2_EX_expected[1] = 1'bX;
end 
// expected Read_Data_2_EX[ 0 ]
initial
begin
	Read_Data_2_EX_expected[0] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 31 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[31] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 30 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[30] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 29 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[29] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 28 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[28] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 27 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[27] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 26 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[26] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 25 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[25] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 24 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[24] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 23 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[23] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 22 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[22] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 21 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[21] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 20 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[20] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 19 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[19] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 18 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[18] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 17 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[17] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 16 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[16] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 15 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[15] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 14 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[14] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 13 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[13] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 12 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[12] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 11 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[11] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 10 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[10] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 9 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[9] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 8 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[8] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 7 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[7] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 6 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[6] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 5 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[5] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 4 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[4] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 3 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[3] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 2 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[2] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 1 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[1] = 1'bX;
end 
// expected Sign_Extend_Instruction_EX[ 0 ]
initial
begin
	Sign_Extend_Instruction_EX_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUOp_EX_expected or ALUOp_EX or ALUSrc_EX_expected or ALUSrc_EX or Branch_EX_expected or Branch_EX or Instruction_EX_expected or Instruction_EX or MemRead_EX_expected or MemRead_EX or MemWrite_EX_expected or MemWrite_EX or MemtoReg_EX_expected or MemtoReg_EX or PC_Plus_4_EX_expected or PC_Plus_4_EX or Read_Data_1_EX_expected or Read_Data_1_EX or Read_Data_2_EX_expected or Read_Data_2_EX or RegDst_EX_expected or RegDst_EX or RegWrite_EX_expected or RegWrite_EX or Sign_Extend_Instruction_EX_expected or Sign_Extend_Instruction_EX)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUOp_EX = %b | expected ALUSrc_EX = %b | expected Branch_EX = %b | expected Instruction_EX = %b | expected MemRead_EX = %b | expected MemWrite_EX = %b | expected MemtoReg_EX = %b | expected PC_Plus_4_EX = %b | expected Read_Data_1_EX = %b | expected Read_Data_2_EX = %b | expected RegDst_EX = %b | expected RegWrite_EX = %b | expected Sign_Extend_Instruction_EX = %b | ",ALUOp_EX_expected_prev,ALUSrc_EX_expected_prev,Branch_EX_expected_prev,Instruction_EX_expected_prev,MemRead_EX_expected_prev,MemWrite_EX_expected_prev,MemtoReg_EX_expected_prev,PC_Plus_4_EX_expected_prev,Read_Data_1_EX_expected_prev,Read_Data_2_EX_expected_prev,RegDst_EX_expected_prev,RegWrite_EX_expected_prev,Sign_Extend_Instruction_EX_expected_prev);
	$display("| real ALUOp_EX = %b | real ALUSrc_EX = %b | real Branch_EX = %b | real Instruction_EX = %b | real MemRead_EX = %b | real MemWrite_EX = %b | real MemtoReg_EX = %b | real PC_Plus_4_EX = %b | real Read_Data_1_EX = %b | real Read_Data_2_EX = %b | real RegDst_EX = %b | real RegWrite_EX = %b | real Sign_Extend_Instruction_EX = %b | ",ALUOp_EX_prev,ALUSrc_EX_prev,Branch_EX_prev,Instruction_EX_prev,MemRead_EX_prev,MemWrite_EX_prev,MemtoReg_EX_prev,PC_Plus_4_EX_prev,Read_Data_1_EX_prev,Read_Data_2_EX_prev,RegDst_EX_prev,RegWrite_EX_prev,Sign_Extend_Instruction_EX_prev);
`endif
	if (
		( ALUOp_EX_expected_prev[0] !== 1'bx ) && ( ALUOp_EX_prev[0] !== ALUOp_EX_expected_prev[0] )
		&& ((ALUOp_EX_expected_prev[0] !== last_ALUOp_EX_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp_EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_EX_expected_prev);
		$display ("     Real value = %b", ALUOp_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOp_EX_exp[0] = ALUOp_EX_expected_prev[0];
	end
	if (
		( ALUOp_EX_expected_prev[1] !== 1'bx ) && ( ALUOp_EX_prev[1] !== ALUOp_EX_expected_prev[1] )
		&& ((ALUOp_EX_expected_prev[1] !== last_ALUOp_EX_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp_EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_EX_expected_prev);
		$display ("     Real value = %b", ALUOp_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOp_EX_exp[1] = ALUOp_EX_expected_prev[1];
	end
	if (
		( ALUSrc_EX_expected_prev !== 1'bx ) && ( ALUSrc_EX_prev !== ALUSrc_EX_expected_prev )
		&& ((ALUSrc_EX_expected_prev !== last_ALUSrc_EX_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_EX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_EX_expected_prev);
		$display ("     Real value = %b", ALUSrc_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_EX_exp = ALUSrc_EX_expected_prev;
	end
	if (
		( Branch_EX_expected_prev !== 1'bx ) && ( Branch_EX_prev !== Branch_EX_expected_prev )
		&& ((Branch_EX_expected_prev !== last_Branch_EX_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch_EX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_EX_expected_prev);
		$display ("     Real value = %b", Branch_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Branch_EX_exp = Branch_EX_expected_prev;
	end
	if (
		( Instruction_EX_expected_prev[0] !== 1'bx ) && ( Instruction_EX_prev[0] !== Instruction_EX_expected_prev[0] )
		&& ((Instruction_EX_expected_prev[0] !== last_Instruction_EX_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[0] = Instruction_EX_expected_prev[0];
	end
	if (
		( Instruction_EX_expected_prev[1] !== 1'bx ) && ( Instruction_EX_prev[1] !== Instruction_EX_expected_prev[1] )
		&& ((Instruction_EX_expected_prev[1] !== last_Instruction_EX_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[1] = Instruction_EX_expected_prev[1];
	end
	if (
		( Instruction_EX_expected_prev[2] !== 1'bx ) && ( Instruction_EX_prev[2] !== Instruction_EX_expected_prev[2] )
		&& ((Instruction_EX_expected_prev[2] !== last_Instruction_EX_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[2] = Instruction_EX_expected_prev[2];
	end
	if (
		( Instruction_EX_expected_prev[3] !== 1'bx ) && ( Instruction_EX_prev[3] !== Instruction_EX_expected_prev[3] )
		&& ((Instruction_EX_expected_prev[3] !== last_Instruction_EX_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[3] = Instruction_EX_expected_prev[3];
	end
	if (
		( Instruction_EX_expected_prev[4] !== 1'bx ) && ( Instruction_EX_prev[4] !== Instruction_EX_expected_prev[4] )
		&& ((Instruction_EX_expected_prev[4] !== last_Instruction_EX_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[4] = Instruction_EX_expected_prev[4];
	end
	if (
		( Instruction_EX_expected_prev[5] !== 1'bx ) && ( Instruction_EX_prev[5] !== Instruction_EX_expected_prev[5] )
		&& ((Instruction_EX_expected_prev[5] !== last_Instruction_EX_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[5] = Instruction_EX_expected_prev[5];
	end
	if (
		( Instruction_EX_expected_prev[6] !== 1'bx ) && ( Instruction_EX_prev[6] !== Instruction_EX_expected_prev[6] )
		&& ((Instruction_EX_expected_prev[6] !== last_Instruction_EX_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[6] = Instruction_EX_expected_prev[6];
	end
	if (
		( Instruction_EX_expected_prev[7] !== 1'bx ) && ( Instruction_EX_prev[7] !== Instruction_EX_expected_prev[7] )
		&& ((Instruction_EX_expected_prev[7] !== last_Instruction_EX_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[7] = Instruction_EX_expected_prev[7];
	end
	if (
		( Instruction_EX_expected_prev[8] !== 1'bx ) && ( Instruction_EX_prev[8] !== Instruction_EX_expected_prev[8] )
		&& ((Instruction_EX_expected_prev[8] !== last_Instruction_EX_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[8] = Instruction_EX_expected_prev[8];
	end
	if (
		( Instruction_EX_expected_prev[9] !== 1'bx ) && ( Instruction_EX_prev[9] !== Instruction_EX_expected_prev[9] )
		&& ((Instruction_EX_expected_prev[9] !== last_Instruction_EX_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[9] = Instruction_EX_expected_prev[9];
	end
	if (
		( Instruction_EX_expected_prev[10] !== 1'bx ) && ( Instruction_EX_prev[10] !== Instruction_EX_expected_prev[10] )
		&& ((Instruction_EX_expected_prev[10] !== last_Instruction_EX_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[10] = Instruction_EX_expected_prev[10];
	end
	if (
		( Instruction_EX_expected_prev[11] !== 1'bx ) && ( Instruction_EX_prev[11] !== Instruction_EX_expected_prev[11] )
		&& ((Instruction_EX_expected_prev[11] !== last_Instruction_EX_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[11] = Instruction_EX_expected_prev[11];
	end
	if (
		( Instruction_EX_expected_prev[12] !== 1'bx ) && ( Instruction_EX_prev[12] !== Instruction_EX_expected_prev[12] )
		&& ((Instruction_EX_expected_prev[12] !== last_Instruction_EX_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[12] = Instruction_EX_expected_prev[12];
	end
	if (
		( Instruction_EX_expected_prev[13] !== 1'bx ) && ( Instruction_EX_prev[13] !== Instruction_EX_expected_prev[13] )
		&& ((Instruction_EX_expected_prev[13] !== last_Instruction_EX_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[13] = Instruction_EX_expected_prev[13];
	end
	if (
		( Instruction_EX_expected_prev[14] !== 1'bx ) && ( Instruction_EX_prev[14] !== Instruction_EX_expected_prev[14] )
		&& ((Instruction_EX_expected_prev[14] !== last_Instruction_EX_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[14] = Instruction_EX_expected_prev[14];
	end
	if (
		( Instruction_EX_expected_prev[15] !== 1'bx ) && ( Instruction_EX_prev[15] !== Instruction_EX_expected_prev[15] )
		&& ((Instruction_EX_expected_prev[15] !== last_Instruction_EX_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[15] = Instruction_EX_expected_prev[15];
	end
	if (
		( Instruction_EX_expected_prev[16] !== 1'bx ) && ( Instruction_EX_prev[16] !== Instruction_EX_expected_prev[16] )
		&& ((Instruction_EX_expected_prev[16] !== last_Instruction_EX_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[16] = Instruction_EX_expected_prev[16];
	end
	if (
		( Instruction_EX_expected_prev[17] !== 1'bx ) && ( Instruction_EX_prev[17] !== Instruction_EX_expected_prev[17] )
		&& ((Instruction_EX_expected_prev[17] !== last_Instruction_EX_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[17] = Instruction_EX_expected_prev[17];
	end
	if (
		( Instruction_EX_expected_prev[18] !== 1'bx ) && ( Instruction_EX_prev[18] !== Instruction_EX_expected_prev[18] )
		&& ((Instruction_EX_expected_prev[18] !== last_Instruction_EX_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[18] = Instruction_EX_expected_prev[18];
	end
	if (
		( Instruction_EX_expected_prev[19] !== 1'bx ) && ( Instruction_EX_prev[19] !== Instruction_EX_expected_prev[19] )
		&& ((Instruction_EX_expected_prev[19] !== last_Instruction_EX_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[19] = Instruction_EX_expected_prev[19];
	end
	if (
		( Instruction_EX_expected_prev[20] !== 1'bx ) && ( Instruction_EX_prev[20] !== Instruction_EX_expected_prev[20] )
		&& ((Instruction_EX_expected_prev[20] !== last_Instruction_EX_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[20] = Instruction_EX_expected_prev[20];
	end
	if (
		( Instruction_EX_expected_prev[21] !== 1'bx ) && ( Instruction_EX_prev[21] !== Instruction_EX_expected_prev[21] )
		&& ((Instruction_EX_expected_prev[21] !== last_Instruction_EX_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[21] = Instruction_EX_expected_prev[21];
	end
	if (
		( Instruction_EX_expected_prev[22] !== 1'bx ) && ( Instruction_EX_prev[22] !== Instruction_EX_expected_prev[22] )
		&& ((Instruction_EX_expected_prev[22] !== last_Instruction_EX_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[22] = Instruction_EX_expected_prev[22];
	end
	if (
		( Instruction_EX_expected_prev[23] !== 1'bx ) && ( Instruction_EX_prev[23] !== Instruction_EX_expected_prev[23] )
		&& ((Instruction_EX_expected_prev[23] !== last_Instruction_EX_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[23] = Instruction_EX_expected_prev[23];
	end
	if (
		( Instruction_EX_expected_prev[24] !== 1'bx ) && ( Instruction_EX_prev[24] !== Instruction_EX_expected_prev[24] )
		&& ((Instruction_EX_expected_prev[24] !== last_Instruction_EX_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[24] = Instruction_EX_expected_prev[24];
	end
	if (
		( Instruction_EX_expected_prev[25] !== 1'bx ) && ( Instruction_EX_prev[25] !== Instruction_EX_expected_prev[25] )
		&& ((Instruction_EX_expected_prev[25] !== last_Instruction_EX_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[25] = Instruction_EX_expected_prev[25];
	end
	if (
		( Instruction_EX_expected_prev[26] !== 1'bx ) && ( Instruction_EX_prev[26] !== Instruction_EX_expected_prev[26] )
		&& ((Instruction_EX_expected_prev[26] !== last_Instruction_EX_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[26] = Instruction_EX_expected_prev[26];
	end
	if (
		( Instruction_EX_expected_prev[27] !== 1'bx ) && ( Instruction_EX_prev[27] !== Instruction_EX_expected_prev[27] )
		&& ((Instruction_EX_expected_prev[27] !== last_Instruction_EX_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[27] = Instruction_EX_expected_prev[27];
	end
	if (
		( Instruction_EX_expected_prev[28] !== 1'bx ) && ( Instruction_EX_prev[28] !== Instruction_EX_expected_prev[28] )
		&& ((Instruction_EX_expected_prev[28] !== last_Instruction_EX_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[28] = Instruction_EX_expected_prev[28];
	end
	if (
		( Instruction_EX_expected_prev[29] !== 1'bx ) && ( Instruction_EX_prev[29] !== Instruction_EX_expected_prev[29] )
		&& ((Instruction_EX_expected_prev[29] !== last_Instruction_EX_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[29] = Instruction_EX_expected_prev[29];
	end
	if (
		( Instruction_EX_expected_prev[30] !== 1'bx ) && ( Instruction_EX_prev[30] !== Instruction_EX_expected_prev[30] )
		&& ((Instruction_EX_expected_prev[30] !== last_Instruction_EX_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[30] = Instruction_EX_expected_prev[30];
	end
	if (
		( Instruction_EX_expected_prev[31] !== 1'bx ) && ( Instruction_EX_prev[31] !== Instruction_EX_expected_prev[31] )
		&& ((Instruction_EX_expected_prev[31] !== last_Instruction_EX_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction_EX[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_EX_expected_prev);
		$display ("     Real value = %b", Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Instruction_EX_exp[31] = Instruction_EX_expected_prev[31];
	end
	if (
		( MemRead_EX_expected_prev !== 1'bx ) && ( MemRead_EX_prev !== MemRead_EX_expected_prev )
		&& ((MemRead_EX_expected_prev !== last_MemRead_EX_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemRead_EX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemRead_EX_expected_prev);
		$display ("     Real value = %b", MemRead_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MemRead_EX_exp = MemRead_EX_expected_prev;
	end
	if (
		( MemWrite_EX_expected_prev !== 1'bx ) && ( MemWrite_EX_prev !== MemWrite_EX_expected_prev )
		&& ((MemWrite_EX_expected_prev !== last_MemWrite_EX_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite_EX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_EX_expected_prev);
		$display ("     Real value = %b", MemWrite_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MemWrite_EX_exp = MemWrite_EX_expected_prev;
	end
	if (
		( MemtoReg_EX_expected_prev !== 1'bx ) && ( MemtoReg_EX_prev !== MemtoReg_EX_expected_prev )
		&& ((MemtoReg_EX_expected_prev !== last_MemtoReg_EX_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_EX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_EX_expected_prev);
		$display ("     Real value = %b", MemtoReg_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MemtoReg_EX_exp = MemtoReg_EX_expected_prev;
	end
	if (
		( PC_Plus_4_EX_expected_prev[0] !== 1'bx ) && ( PC_Plus_4_EX_prev[0] !== PC_Plus_4_EX_expected_prev[0] )
		&& ((PC_Plus_4_EX_expected_prev[0] !== last_PC_Plus_4_EX_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[0] = PC_Plus_4_EX_expected_prev[0];
	end
	if (
		( PC_Plus_4_EX_expected_prev[1] !== 1'bx ) && ( PC_Plus_4_EX_prev[1] !== PC_Plus_4_EX_expected_prev[1] )
		&& ((PC_Plus_4_EX_expected_prev[1] !== last_PC_Plus_4_EX_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[1] = PC_Plus_4_EX_expected_prev[1];
	end
	if (
		( PC_Plus_4_EX_expected_prev[2] !== 1'bx ) && ( PC_Plus_4_EX_prev[2] !== PC_Plus_4_EX_expected_prev[2] )
		&& ((PC_Plus_4_EX_expected_prev[2] !== last_PC_Plus_4_EX_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[2] = PC_Plus_4_EX_expected_prev[2];
	end
	if (
		( PC_Plus_4_EX_expected_prev[3] !== 1'bx ) && ( PC_Plus_4_EX_prev[3] !== PC_Plus_4_EX_expected_prev[3] )
		&& ((PC_Plus_4_EX_expected_prev[3] !== last_PC_Plus_4_EX_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[3] = PC_Plus_4_EX_expected_prev[3];
	end
	if (
		( PC_Plus_4_EX_expected_prev[4] !== 1'bx ) && ( PC_Plus_4_EX_prev[4] !== PC_Plus_4_EX_expected_prev[4] )
		&& ((PC_Plus_4_EX_expected_prev[4] !== last_PC_Plus_4_EX_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[4] = PC_Plus_4_EX_expected_prev[4];
	end
	if (
		( PC_Plus_4_EX_expected_prev[5] !== 1'bx ) && ( PC_Plus_4_EX_prev[5] !== PC_Plus_4_EX_expected_prev[5] )
		&& ((PC_Plus_4_EX_expected_prev[5] !== last_PC_Plus_4_EX_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[5] = PC_Plus_4_EX_expected_prev[5];
	end
	if (
		( PC_Plus_4_EX_expected_prev[6] !== 1'bx ) && ( PC_Plus_4_EX_prev[6] !== PC_Plus_4_EX_expected_prev[6] )
		&& ((PC_Plus_4_EX_expected_prev[6] !== last_PC_Plus_4_EX_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[6] = PC_Plus_4_EX_expected_prev[6];
	end
	if (
		( PC_Plus_4_EX_expected_prev[7] !== 1'bx ) && ( PC_Plus_4_EX_prev[7] !== PC_Plus_4_EX_expected_prev[7] )
		&& ((PC_Plus_4_EX_expected_prev[7] !== last_PC_Plus_4_EX_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[7] = PC_Plus_4_EX_expected_prev[7];
	end
	if (
		( PC_Plus_4_EX_expected_prev[8] !== 1'bx ) && ( PC_Plus_4_EX_prev[8] !== PC_Plus_4_EX_expected_prev[8] )
		&& ((PC_Plus_4_EX_expected_prev[8] !== last_PC_Plus_4_EX_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[8] = PC_Plus_4_EX_expected_prev[8];
	end
	if (
		( PC_Plus_4_EX_expected_prev[9] !== 1'bx ) && ( PC_Plus_4_EX_prev[9] !== PC_Plus_4_EX_expected_prev[9] )
		&& ((PC_Plus_4_EX_expected_prev[9] !== last_PC_Plus_4_EX_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[9] = PC_Plus_4_EX_expected_prev[9];
	end
	if (
		( PC_Plus_4_EX_expected_prev[10] !== 1'bx ) && ( PC_Plus_4_EX_prev[10] !== PC_Plus_4_EX_expected_prev[10] )
		&& ((PC_Plus_4_EX_expected_prev[10] !== last_PC_Plus_4_EX_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[10] = PC_Plus_4_EX_expected_prev[10];
	end
	if (
		( PC_Plus_4_EX_expected_prev[11] !== 1'bx ) && ( PC_Plus_4_EX_prev[11] !== PC_Plus_4_EX_expected_prev[11] )
		&& ((PC_Plus_4_EX_expected_prev[11] !== last_PC_Plus_4_EX_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[11] = PC_Plus_4_EX_expected_prev[11];
	end
	if (
		( PC_Plus_4_EX_expected_prev[12] !== 1'bx ) && ( PC_Plus_4_EX_prev[12] !== PC_Plus_4_EX_expected_prev[12] )
		&& ((PC_Plus_4_EX_expected_prev[12] !== last_PC_Plus_4_EX_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[12] = PC_Plus_4_EX_expected_prev[12];
	end
	if (
		( PC_Plus_4_EX_expected_prev[13] !== 1'bx ) && ( PC_Plus_4_EX_prev[13] !== PC_Plus_4_EX_expected_prev[13] )
		&& ((PC_Plus_4_EX_expected_prev[13] !== last_PC_Plus_4_EX_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[13] = PC_Plus_4_EX_expected_prev[13];
	end
	if (
		( PC_Plus_4_EX_expected_prev[14] !== 1'bx ) && ( PC_Plus_4_EX_prev[14] !== PC_Plus_4_EX_expected_prev[14] )
		&& ((PC_Plus_4_EX_expected_prev[14] !== last_PC_Plus_4_EX_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[14] = PC_Plus_4_EX_expected_prev[14];
	end
	if (
		( PC_Plus_4_EX_expected_prev[15] !== 1'bx ) && ( PC_Plus_4_EX_prev[15] !== PC_Plus_4_EX_expected_prev[15] )
		&& ((PC_Plus_4_EX_expected_prev[15] !== last_PC_Plus_4_EX_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[15] = PC_Plus_4_EX_expected_prev[15];
	end
	if (
		( PC_Plus_4_EX_expected_prev[16] !== 1'bx ) && ( PC_Plus_4_EX_prev[16] !== PC_Plus_4_EX_expected_prev[16] )
		&& ((PC_Plus_4_EX_expected_prev[16] !== last_PC_Plus_4_EX_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[16] = PC_Plus_4_EX_expected_prev[16];
	end
	if (
		( PC_Plus_4_EX_expected_prev[17] !== 1'bx ) && ( PC_Plus_4_EX_prev[17] !== PC_Plus_4_EX_expected_prev[17] )
		&& ((PC_Plus_4_EX_expected_prev[17] !== last_PC_Plus_4_EX_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[17] = PC_Plus_4_EX_expected_prev[17];
	end
	if (
		( PC_Plus_4_EX_expected_prev[18] !== 1'bx ) && ( PC_Plus_4_EX_prev[18] !== PC_Plus_4_EX_expected_prev[18] )
		&& ((PC_Plus_4_EX_expected_prev[18] !== last_PC_Plus_4_EX_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[18] = PC_Plus_4_EX_expected_prev[18];
	end
	if (
		( PC_Plus_4_EX_expected_prev[19] !== 1'bx ) && ( PC_Plus_4_EX_prev[19] !== PC_Plus_4_EX_expected_prev[19] )
		&& ((PC_Plus_4_EX_expected_prev[19] !== last_PC_Plus_4_EX_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[19] = PC_Plus_4_EX_expected_prev[19];
	end
	if (
		( PC_Plus_4_EX_expected_prev[20] !== 1'bx ) && ( PC_Plus_4_EX_prev[20] !== PC_Plus_4_EX_expected_prev[20] )
		&& ((PC_Plus_4_EX_expected_prev[20] !== last_PC_Plus_4_EX_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[20] = PC_Plus_4_EX_expected_prev[20];
	end
	if (
		( PC_Plus_4_EX_expected_prev[21] !== 1'bx ) && ( PC_Plus_4_EX_prev[21] !== PC_Plus_4_EX_expected_prev[21] )
		&& ((PC_Plus_4_EX_expected_prev[21] !== last_PC_Plus_4_EX_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[21] = PC_Plus_4_EX_expected_prev[21];
	end
	if (
		( PC_Plus_4_EX_expected_prev[22] !== 1'bx ) && ( PC_Plus_4_EX_prev[22] !== PC_Plus_4_EX_expected_prev[22] )
		&& ((PC_Plus_4_EX_expected_prev[22] !== last_PC_Plus_4_EX_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[22] = PC_Plus_4_EX_expected_prev[22];
	end
	if (
		( PC_Plus_4_EX_expected_prev[23] !== 1'bx ) && ( PC_Plus_4_EX_prev[23] !== PC_Plus_4_EX_expected_prev[23] )
		&& ((PC_Plus_4_EX_expected_prev[23] !== last_PC_Plus_4_EX_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[23] = PC_Plus_4_EX_expected_prev[23];
	end
	if (
		( PC_Plus_4_EX_expected_prev[24] !== 1'bx ) && ( PC_Plus_4_EX_prev[24] !== PC_Plus_4_EX_expected_prev[24] )
		&& ((PC_Plus_4_EX_expected_prev[24] !== last_PC_Plus_4_EX_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[24] = PC_Plus_4_EX_expected_prev[24];
	end
	if (
		( PC_Plus_4_EX_expected_prev[25] !== 1'bx ) && ( PC_Plus_4_EX_prev[25] !== PC_Plus_4_EX_expected_prev[25] )
		&& ((PC_Plus_4_EX_expected_prev[25] !== last_PC_Plus_4_EX_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[25] = PC_Plus_4_EX_expected_prev[25];
	end
	if (
		( PC_Plus_4_EX_expected_prev[26] !== 1'bx ) && ( PC_Plus_4_EX_prev[26] !== PC_Plus_4_EX_expected_prev[26] )
		&& ((PC_Plus_4_EX_expected_prev[26] !== last_PC_Plus_4_EX_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[26] = PC_Plus_4_EX_expected_prev[26];
	end
	if (
		( PC_Plus_4_EX_expected_prev[27] !== 1'bx ) && ( PC_Plus_4_EX_prev[27] !== PC_Plus_4_EX_expected_prev[27] )
		&& ((PC_Plus_4_EX_expected_prev[27] !== last_PC_Plus_4_EX_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[27] = PC_Plus_4_EX_expected_prev[27];
	end
	if (
		( PC_Plus_4_EX_expected_prev[28] !== 1'bx ) && ( PC_Plus_4_EX_prev[28] !== PC_Plus_4_EX_expected_prev[28] )
		&& ((PC_Plus_4_EX_expected_prev[28] !== last_PC_Plus_4_EX_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[28] = PC_Plus_4_EX_expected_prev[28];
	end
	if (
		( PC_Plus_4_EX_expected_prev[29] !== 1'bx ) && ( PC_Plus_4_EX_prev[29] !== PC_Plus_4_EX_expected_prev[29] )
		&& ((PC_Plus_4_EX_expected_prev[29] !== last_PC_Plus_4_EX_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[29] = PC_Plus_4_EX_expected_prev[29];
	end
	if (
		( PC_Plus_4_EX_expected_prev[30] !== 1'bx ) && ( PC_Plus_4_EX_prev[30] !== PC_Plus_4_EX_expected_prev[30] )
		&& ((PC_Plus_4_EX_expected_prev[30] !== last_PC_Plus_4_EX_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[30] = PC_Plus_4_EX_expected_prev[30];
	end
	if (
		( PC_Plus_4_EX_expected_prev[31] !== 1'bx ) && ( PC_Plus_4_EX_prev[31] !== PC_Plus_4_EX_expected_prev[31] )
		&& ((PC_Plus_4_EX_expected_prev[31] !== last_PC_Plus_4_EX_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Plus_4_EX[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Plus_4_EX_expected_prev);
		$display ("     Real value = %b", PC_Plus_4_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_PC_Plus_4_EX_exp[31] = PC_Plus_4_EX_expected_prev[31];
	end
	if (
		( Read_Data_1_EX_expected_prev[0] !== 1'bx ) && ( Read_Data_1_EX_prev[0] !== Read_Data_1_EX_expected_prev[0] )
		&& ((Read_Data_1_EX_expected_prev[0] !== last_Read_Data_1_EX_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[0] = Read_Data_1_EX_expected_prev[0];
	end
	if (
		( Read_Data_1_EX_expected_prev[1] !== 1'bx ) && ( Read_Data_1_EX_prev[1] !== Read_Data_1_EX_expected_prev[1] )
		&& ((Read_Data_1_EX_expected_prev[1] !== last_Read_Data_1_EX_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[1] = Read_Data_1_EX_expected_prev[1];
	end
	if (
		( Read_Data_1_EX_expected_prev[2] !== 1'bx ) && ( Read_Data_1_EX_prev[2] !== Read_Data_1_EX_expected_prev[2] )
		&& ((Read_Data_1_EX_expected_prev[2] !== last_Read_Data_1_EX_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[2] = Read_Data_1_EX_expected_prev[2];
	end
	if (
		( Read_Data_1_EX_expected_prev[3] !== 1'bx ) && ( Read_Data_1_EX_prev[3] !== Read_Data_1_EX_expected_prev[3] )
		&& ((Read_Data_1_EX_expected_prev[3] !== last_Read_Data_1_EX_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[3] = Read_Data_1_EX_expected_prev[3];
	end
	if (
		( Read_Data_1_EX_expected_prev[4] !== 1'bx ) && ( Read_Data_1_EX_prev[4] !== Read_Data_1_EX_expected_prev[4] )
		&& ((Read_Data_1_EX_expected_prev[4] !== last_Read_Data_1_EX_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[4] = Read_Data_1_EX_expected_prev[4];
	end
	if (
		( Read_Data_1_EX_expected_prev[5] !== 1'bx ) && ( Read_Data_1_EX_prev[5] !== Read_Data_1_EX_expected_prev[5] )
		&& ((Read_Data_1_EX_expected_prev[5] !== last_Read_Data_1_EX_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[5] = Read_Data_1_EX_expected_prev[5];
	end
	if (
		( Read_Data_1_EX_expected_prev[6] !== 1'bx ) && ( Read_Data_1_EX_prev[6] !== Read_Data_1_EX_expected_prev[6] )
		&& ((Read_Data_1_EX_expected_prev[6] !== last_Read_Data_1_EX_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[6] = Read_Data_1_EX_expected_prev[6];
	end
	if (
		( Read_Data_1_EX_expected_prev[7] !== 1'bx ) && ( Read_Data_1_EX_prev[7] !== Read_Data_1_EX_expected_prev[7] )
		&& ((Read_Data_1_EX_expected_prev[7] !== last_Read_Data_1_EX_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[7] = Read_Data_1_EX_expected_prev[7];
	end
	if (
		( Read_Data_1_EX_expected_prev[8] !== 1'bx ) && ( Read_Data_1_EX_prev[8] !== Read_Data_1_EX_expected_prev[8] )
		&& ((Read_Data_1_EX_expected_prev[8] !== last_Read_Data_1_EX_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[8] = Read_Data_1_EX_expected_prev[8];
	end
	if (
		( Read_Data_1_EX_expected_prev[9] !== 1'bx ) && ( Read_Data_1_EX_prev[9] !== Read_Data_1_EX_expected_prev[9] )
		&& ((Read_Data_1_EX_expected_prev[9] !== last_Read_Data_1_EX_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[9] = Read_Data_1_EX_expected_prev[9];
	end
	if (
		( Read_Data_1_EX_expected_prev[10] !== 1'bx ) && ( Read_Data_1_EX_prev[10] !== Read_Data_1_EX_expected_prev[10] )
		&& ((Read_Data_1_EX_expected_prev[10] !== last_Read_Data_1_EX_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[10] = Read_Data_1_EX_expected_prev[10];
	end
	if (
		( Read_Data_1_EX_expected_prev[11] !== 1'bx ) && ( Read_Data_1_EX_prev[11] !== Read_Data_1_EX_expected_prev[11] )
		&& ((Read_Data_1_EX_expected_prev[11] !== last_Read_Data_1_EX_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[11] = Read_Data_1_EX_expected_prev[11];
	end
	if (
		( Read_Data_1_EX_expected_prev[12] !== 1'bx ) && ( Read_Data_1_EX_prev[12] !== Read_Data_1_EX_expected_prev[12] )
		&& ((Read_Data_1_EX_expected_prev[12] !== last_Read_Data_1_EX_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[12] = Read_Data_1_EX_expected_prev[12];
	end
	if (
		( Read_Data_1_EX_expected_prev[13] !== 1'bx ) && ( Read_Data_1_EX_prev[13] !== Read_Data_1_EX_expected_prev[13] )
		&& ((Read_Data_1_EX_expected_prev[13] !== last_Read_Data_1_EX_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[13] = Read_Data_1_EX_expected_prev[13];
	end
	if (
		( Read_Data_1_EX_expected_prev[14] !== 1'bx ) && ( Read_Data_1_EX_prev[14] !== Read_Data_1_EX_expected_prev[14] )
		&& ((Read_Data_1_EX_expected_prev[14] !== last_Read_Data_1_EX_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[14] = Read_Data_1_EX_expected_prev[14];
	end
	if (
		( Read_Data_1_EX_expected_prev[15] !== 1'bx ) && ( Read_Data_1_EX_prev[15] !== Read_Data_1_EX_expected_prev[15] )
		&& ((Read_Data_1_EX_expected_prev[15] !== last_Read_Data_1_EX_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[15] = Read_Data_1_EX_expected_prev[15];
	end
	if (
		( Read_Data_1_EX_expected_prev[16] !== 1'bx ) && ( Read_Data_1_EX_prev[16] !== Read_Data_1_EX_expected_prev[16] )
		&& ((Read_Data_1_EX_expected_prev[16] !== last_Read_Data_1_EX_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[16] = Read_Data_1_EX_expected_prev[16];
	end
	if (
		( Read_Data_1_EX_expected_prev[17] !== 1'bx ) && ( Read_Data_1_EX_prev[17] !== Read_Data_1_EX_expected_prev[17] )
		&& ((Read_Data_1_EX_expected_prev[17] !== last_Read_Data_1_EX_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[17] = Read_Data_1_EX_expected_prev[17];
	end
	if (
		( Read_Data_1_EX_expected_prev[18] !== 1'bx ) && ( Read_Data_1_EX_prev[18] !== Read_Data_1_EX_expected_prev[18] )
		&& ((Read_Data_1_EX_expected_prev[18] !== last_Read_Data_1_EX_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[18] = Read_Data_1_EX_expected_prev[18];
	end
	if (
		( Read_Data_1_EX_expected_prev[19] !== 1'bx ) && ( Read_Data_1_EX_prev[19] !== Read_Data_1_EX_expected_prev[19] )
		&& ((Read_Data_1_EX_expected_prev[19] !== last_Read_Data_1_EX_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[19] = Read_Data_1_EX_expected_prev[19];
	end
	if (
		( Read_Data_1_EX_expected_prev[20] !== 1'bx ) && ( Read_Data_1_EX_prev[20] !== Read_Data_1_EX_expected_prev[20] )
		&& ((Read_Data_1_EX_expected_prev[20] !== last_Read_Data_1_EX_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[20] = Read_Data_1_EX_expected_prev[20];
	end
	if (
		( Read_Data_1_EX_expected_prev[21] !== 1'bx ) && ( Read_Data_1_EX_prev[21] !== Read_Data_1_EX_expected_prev[21] )
		&& ((Read_Data_1_EX_expected_prev[21] !== last_Read_Data_1_EX_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[21] = Read_Data_1_EX_expected_prev[21];
	end
	if (
		( Read_Data_1_EX_expected_prev[22] !== 1'bx ) && ( Read_Data_1_EX_prev[22] !== Read_Data_1_EX_expected_prev[22] )
		&& ((Read_Data_1_EX_expected_prev[22] !== last_Read_Data_1_EX_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[22] = Read_Data_1_EX_expected_prev[22];
	end
	if (
		( Read_Data_1_EX_expected_prev[23] !== 1'bx ) && ( Read_Data_1_EX_prev[23] !== Read_Data_1_EX_expected_prev[23] )
		&& ((Read_Data_1_EX_expected_prev[23] !== last_Read_Data_1_EX_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[23] = Read_Data_1_EX_expected_prev[23];
	end
	if (
		( Read_Data_1_EX_expected_prev[24] !== 1'bx ) && ( Read_Data_1_EX_prev[24] !== Read_Data_1_EX_expected_prev[24] )
		&& ((Read_Data_1_EX_expected_prev[24] !== last_Read_Data_1_EX_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[24] = Read_Data_1_EX_expected_prev[24];
	end
	if (
		( Read_Data_1_EX_expected_prev[25] !== 1'bx ) && ( Read_Data_1_EX_prev[25] !== Read_Data_1_EX_expected_prev[25] )
		&& ((Read_Data_1_EX_expected_prev[25] !== last_Read_Data_1_EX_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[25] = Read_Data_1_EX_expected_prev[25];
	end
	if (
		( Read_Data_1_EX_expected_prev[26] !== 1'bx ) && ( Read_Data_1_EX_prev[26] !== Read_Data_1_EX_expected_prev[26] )
		&& ((Read_Data_1_EX_expected_prev[26] !== last_Read_Data_1_EX_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[26] = Read_Data_1_EX_expected_prev[26];
	end
	if (
		( Read_Data_1_EX_expected_prev[27] !== 1'bx ) && ( Read_Data_1_EX_prev[27] !== Read_Data_1_EX_expected_prev[27] )
		&& ((Read_Data_1_EX_expected_prev[27] !== last_Read_Data_1_EX_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[27] = Read_Data_1_EX_expected_prev[27];
	end
	if (
		( Read_Data_1_EX_expected_prev[28] !== 1'bx ) && ( Read_Data_1_EX_prev[28] !== Read_Data_1_EX_expected_prev[28] )
		&& ((Read_Data_1_EX_expected_prev[28] !== last_Read_Data_1_EX_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[28] = Read_Data_1_EX_expected_prev[28];
	end
	if (
		( Read_Data_1_EX_expected_prev[29] !== 1'bx ) && ( Read_Data_1_EX_prev[29] !== Read_Data_1_EX_expected_prev[29] )
		&& ((Read_Data_1_EX_expected_prev[29] !== last_Read_Data_1_EX_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[29] = Read_Data_1_EX_expected_prev[29];
	end
	if (
		( Read_Data_1_EX_expected_prev[30] !== 1'bx ) && ( Read_Data_1_EX_prev[30] !== Read_Data_1_EX_expected_prev[30] )
		&& ((Read_Data_1_EX_expected_prev[30] !== last_Read_Data_1_EX_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[30] = Read_Data_1_EX_expected_prev[30];
	end
	if (
		( Read_Data_1_EX_expected_prev[31] !== 1'bx ) && ( Read_Data_1_EX_prev[31] !== Read_Data_1_EX_expected_prev[31] )
		&& ((Read_Data_1_EX_expected_prev[31] !== last_Read_Data_1_EX_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_1_EX[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_1_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_1_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Read_Data_1_EX_exp[31] = Read_Data_1_EX_expected_prev[31];
	end
	if (
		( Read_Data_2_EX_expected_prev[0] !== 1'bx ) && ( Read_Data_2_EX_prev[0] !== Read_Data_2_EX_expected_prev[0] )
		&& ((Read_Data_2_EX_expected_prev[0] !== last_Read_Data_2_EX_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[0] = Read_Data_2_EX_expected_prev[0];
	end
	if (
		( Read_Data_2_EX_expected_prev[1] !== 1'bx ) && ( Read_Data_2_EX_prev[1] !== Read_Data_2_EX_expected_prev[1] )
		&& ((Read_Data_2_EX_expected_prev[1] !== last_Read_Data_2_EX_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[1] = Read_Data_2_EX_expected_prev[1];
	end
	if (
		( Read_Data_2_EX_expected_prev[2] !== 1'bx ) && ( Read_Data_2_EX_prev[2] !== Read_Data_2_EX_expected_prev[2] )
		&& ((Read_Data_2_EX_expected_prev[2] !== last_Read_Data_2_EX_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[2] = Read_Data_2_EX_expected_prev[2];
	end
	if (
		( Read_Data_2_EX_expected_prev[3] !== 1'bx ) && ( Read_Data_2_EX_prev[3] !== Read_Data_2_EX_expected_prev[3] )
		&& ((Read_Data_2_EX_expected_prev[3] !== last_Read_Data_2_EX_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[3] = Read_Data_2_EX_expected_prev[3];
	end
	if (
		( Read_Data_2_EX_expected_prev[4] !== 1'bx ) && ( Read_Data_2_EX_prev[4] !== Read_Data_2_EX_expected_prev[4] )
		&& ((Read_Data_2_EX_expected_prev[4] !== last_Read_Data_2_EX_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[4] = Read_Data_2_EX_expected_prev[4];
	end
	if (
		( Read_Data_2_EX_expected_prev[5] !== 1'bx ) && ( Read_Data_2_EX_prev[5] !== Read_Data_2_EX_expected_prev[5] )
		&& ((Read_Data_2_EX_expected_prev[5] !== last_Read_Data_2_EX_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[5] = Read_Data_2_EX_expected_prev[5];
	end
	if (
		( Read_Data_2_EX_expected_prev[6] !== 1'bx ) && ( Read_Data_2_EX_prev[6] !== Read_Data_2_EX_expected_prev[6] )
		&& ((Read_Data_2_EX_expected_prev[6] !== last_Read_Data_2_EX_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[6] = Read_Data_2_EX_expected_prev[6];
	end
	if (
		( Read_Data_2_EX_expected_prev[7] !== 1'bx ) && ( Read_Data_2_EX_prev[7] !== Read_Data_2_EX_expected_prev[7] )
		&& ((Read_Data_2_EX_expected_prev[7] !== last_Read_Data_2_EX_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[7] = Read_Data_2_EX_expected_prev[7];
	end
	if (
		( Read_Data_2_EX_expected_prev[8] !== 1'bx ) && ( Read_Data_2_EX_prev[8] !== Read_Data_2_EX_expected_prev[8] )
		&& ((Read_Data_2_EX_expected_prev[8] !== last_Read_Data_2_EX_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[8] = Read_Data_2_EX_expected_prev[8];
	end
	if (
		( Read_Data_2_EX_expected_prev[9] !== 1'bx ) && ( Read_Data_2_EX_prev[9] !== Read_Data_2_EX_expected_prev[9] )
		&& ((Read_Data_2_EX_expected_prev[9] !== last_Read_Data_2_EX_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[9] = Read_Data_2_EX_expected_prev[9];
	end
	if (
		( Read_Data_2_EX_expected_prev[10] !== 1'bx ) && ( Read_Data_2_EX_prev[10] !== Read_Data_2_EX_expected_prev[10] )
		&& ((Read_Data_2_EX_expected_prev[10] !== last_Read_Data_2_EX_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[10] = Read_Data_2_EX_expected_prev[10];
	end
	if (
		( Read_Data_2_EX_expected_prev[11] !== 1'bx ) && ( Read_Data_2_EX_prev[11] !== Read_Data_2_EX_expected_prev[11] )
		&& ((Read_Data_2_EX_expected_prev[11] !== last_Read_Data_2_EX_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[11] = Read_Data_2_EX_expected_prev[11];
	end
	if (
		( Read_Data_2_EX_expected_prev[12] !== 1'bx ) && ( Read_Data_2_EX_prev[12] !== Read_Data_2_EX_expected_prev[12] )
		&& ((Read_Data_2_EX_expected_prev[12] !== last_Read_Data_2_EX_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[12] = Read_Data_2_EX_expected_prev[12];
	end
	if (
		( Read_Data_2_EX_expected_prev[13] !== 1'bx ) && ( Read_Data_2_EX_prev[13] !== Read_Data_2_EX_expected_prev[13] )
		&& ((Read_Data_2_EX_expected_prev[13] !== last_Read_Data_2_EX_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[13] = Read_Data_2_EX_expected_prev[13];
	end
	if (
		( Read_Data_2_EX_expected_prev[14] !== 1'bx ) && ( Read_Data_2_EX_prev[14] !== Read_Data_2_EX_expected_prev[14] )
		&& ((Read_Data_2_EX_expected_prev[14] !== last_Read_Data_2_EX_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[14] = Read_Data_2_EX_expected_prev[14];
	end
	if (
		( Read_Data_2_EX_expected_prev[15] !== 1'bx ) && ( Read_Data_2_EX_prev[15] !== Read_Data_2_EX_expected_prev[15] )
		&& ((Read_Data_2_EX_expected_prev[15] !== last_Read_Data_2_EX_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[15] = Read_Data_2_EX_expected_prev[15];
	end
	if (
		( Read_Data_2_EX_expected_prev[16] !== 1'bx ) && ( Read_Data_2_EX_prev[16] !== Read_Data_2_EX_expected_prev[16] )
		&& ((Read_Data_2_EX_expected_prev[16] !== last_Read_Data_2_EX_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[16] = Read_Data_2_EX_expected_prev[16];
	end
	if (
		( Read_Data_2_EX_expected_prev[17] !== 1'bx ) && ( Read_Data_2_EX_prev[17] !== Read_Data_2_EX_expected_prev[17] )
		&& ((Read_Data_2_EX_expected_prev[17] !== last_Read_Data_2_EX_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[17] = Read_Data_2_EX_expected_prev[17];
	end
	if (
		( Read_Data_2_EX_expected_prev[18] !== 1'bx ) && ( Read_Data_2_EX_prev[18] !== Read_Data_2_EX_expected_prev[18] )
		&& ((Read_Data_2_EX_expected_prev[18] !== last_Read_Data_2_EX_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[18] = Read_Data_2_EX_expected_prev[18];
	end
	if (
		( Read_Data_2_EX_expected_prev[19] !== 1'bx ) && ( Read_Data_2_EX_prev[19] !== Read_Data_2_EX_expected_prev[19] )
		&& ((Read_Data_2_EX_expected_prev[19] !== last_Read_Data_2_EX_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[19] = Read_Data_2_EX_expected_prev[19];
	end
	if (
		( Read_Data_2_EX_expected_prev[20] !== 1'bx ) && ( Read_Data_2_EX_prev[20] !== Read_Data_2_EX_expected_prev[20] )
		&& ((Read_Data_2_EX_expected_prev[20] !== last_Read_Data_2_EX_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[20] = Read_Data_2_EX_expected_prev[20];
	end
	if (
		( Read_Data_2_EX_expected_prev[21] !== 1'bx ) && ( Read_Data_2_EX_prev[21] !== Read_Data_2_EX_expected_prev[21] )
		&& ((Read_Data_2_EX_expected_prev[21] !== last_Read_Data_2_EX_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[21] = Read_Data_2_EX_expected_prev[21];
	end
	if (
		( Read_Data_2_EX_expected_prev[22] !== 1'bx ) && ( Read_Data_2_EX_prev[22] !== Read_Data_2_EX_expected_prev[22] )
		&& ((Read_Data_2_EX_expected_prev[22] !== last_Read_Data_2_EX_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[22] = Read_Data_2_EX_expected_prev[22];
	end
	if (
		( Read_Data_2_EX_expected_prev[23] !== 1'bx ) && ( Read_Data_2_EX_prev[23] !== Read_Data_2_EX_expected_prev[23] )
		&& ((Read_Data_2_EX_expected_prev[23] !== last_Read_Data_2_EX_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[23] = Read_Data_2_EX_expected_prev[23];
	end
	if (
		( Read_Data_2_EX_expected_prev[24] !== 1'bx ) && ( Read_Data_2_EX_prev[24] !== Read_Data_2_EX_expected_prev[24] )
		&& ((Read_Data_2_EX_expected_prev[24] !== last_Read_Data_2_EX_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[24] = Read_Data_2_EX_expected_prev[24];
	end
	if (
		( Read_Data_2_EX_expected_prev[25] !== 1'bx ) && ( Read_Data_2_EX_prev[25] !== Read_Data_2_EX_expected_prev[25] )
		&& ((Read_Data_2_EX_expected_prev[25] !== last_Read_Data_2_EX_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[25] = Read_Data_2_EX_expected_prev[25];
	end
	if (
		( Read_Data_2_EX_expected_prev[26] !== 1'bx ) && ( Read_Data_2_EX_prev[26] !== Read_Data_2_EX_expected_prev[26] )
		&& ((Read_Data_2_EX_expected_prev[26] !== last_Read_Data_2_EX_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[26] = Read_Data_2_EX_expected_prev[26];
	end
	if (
		( Read_Data_2_EX_expected_prev[27] !== 1'bx ) && ( Read_Data_2_EX_prev[27] !== Read_Data_2_EX_expected_prev[27] )
		&& ((Read_Data_2_EX_expected_prev[27] !== last_Read_Data_2_EX_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[27] = Read_Data_2_EX_expected_prev[27];
	end
	if (
		( Read_Data_2_EX_expected_prev[28] !== 1'bx ) && ( Read_Data_2_EX_prev[28] !== Read_Data_2_EX_expected_prev[28] )
		&& ((Read_Data_2_EX_expected_prev[28] !== last_Read_Data_2_EX_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[28] = Read_Data_2_EX_expected_prev[28];
	end
	if (
		( Read_Data_2_EX_expected_prev[29] !== 1'bx ) && ( Read_Data_2_EX_prev[29] !== Read_Data_2_EX_expected_prev[29] )
		&& ((Read_Data_2_EX_expected_prev[29] !== last_Read_Data_2_EX_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[29] = Read_Data_2_EX_expected_prev[29];
	end
	if (
		( Read_Data_2_EX_expected_prev[30] !== 1'bx ) && ( Read_Data_2_EX_prev[30] !== Read_Data_2_EX_expected_prev[30] )
		&& ((Read_Data_2_EX_expected_prev[30] !== last_Read_Data_2_EX_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[30] = Read_Data_2_EX_expected_prev[30];
	end
	if (
		( Read_Data_2_EX_expected_prev[31] !== 1'bx ) && ( Read_Data_2_EX_prev[31] !== Read_Data_2_EX_expected_prev[31] )
		&& ((Read_Data_2_EX_expected_prev[31] !== last_Read_Data_2_EX_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_Data_2_EX[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_Data_2_EX_expected_prev);
		$display ("     Real value = %b", Read_Data_2_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Read_Data_2_EX_exp[31] = Read_Data_2_EX_expected_prev[31];
	end
	if (
		( RegDst_EX_expected_prev !== 1'bx ) && ( RegDst_EX_prev !== RegDst_EX_expected_prev )
		&& ((RegDst_EX_expected_prev !== last_RegDst_EX_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst_EX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_EX_expected_prev);
		$display ("     Real value = %b", RegDst_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RegDst_EX_exp = RegDst_EX_expected_prev;
	end
	if (
		( RegWrite_EX_expected_prev !== 1'bx ) && ( RegWrite_EX_prev !== RegWrite_EX_expected_prev )
		&& ((RegWrite_EX_expected_prev !== last_RegWrite_EX_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegWrite_EX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegWrite_EX_expected_prev);
		$display ("     Real value = %b", RegWrite_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RegWrite_EX_exp = RegWrite_EX_expected_prev;
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[0] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[0] !== Sign_Extend_Instruction_EX_expected_prev[0] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[0] !== last_Sign_Extend_Instruction_EX_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[0] = Sign_Extend_Instruction_EX_expected_prev[0];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[1] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[1] !== Sign_Extend_Instruction_EX_expected_prev[1] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[1] !== last_Sign_Extend_Instruction_EX_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[1] = Sign_Extend_Instruction_EX_expected_prev[1];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[2] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[2] !== Sign_Extend_Instruction_EX_expected_prev[2] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[2] !== last_Sign_Extend_Instruction_EX_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[2] = Sign_Extend_Instruction_EX_expected_prev[2];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[3] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[3] !== Sign_Extend_Instruction_EX_expected_prev[3] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[3] !== last_Sign_Extend_Instruction_EX_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[3] = Sign_Extend_Instruction_EX_expected_prev[3];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[4] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[4] !== Sign_Extend_Instruction_EX_expected_prev[4] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[4] !== last_Sign_Extend_Instruction_EX_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[4] = Sign_Extend_Instruction_EX_expected_prev[4];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[5] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[5] !== Sign_Extend_Instruction_EX_expected_prev[5] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[5] !== last_Sign_Extend_Instruction_EX_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[5] = Sign_Extend_Instruction_EX_expected_prev[5];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[6] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[6] !== Sign_Extend_Instruction_EX_expected_prev[6] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[6] !== last_Sign_Extend_Instruction_EX_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[6] = Sign_Extend_Instruction_EX_expected_prev[6];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[7] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[7] !== Sign_Extend_Instruction_EX_expected_prev[7] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[7] !== last_Sign_Extend_Instruction_EX_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[7] = Sign_Extend_Instruction_EX_expected_prev[7];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[8] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[8] !== Sign_Extend_Instruction_EX_expected_prev[8] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[8] !== last_Sign_Extend_Instruction_EX_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[8] = Sign_Extend_Instruction_EX_expected_prev[8];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[9] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[9] !== Sign_Extend_Instruction_EX_expected_prev[9] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[9] !== last_Sign_Extend_Instruction_EX_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[9] = Sign_Extend_Instruction_EX_expected_prev[9];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[10] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[10] !== Sign_Extend_Instruction_EX_expected_prev[10] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[10] !== last_Sign_Extend_Instruction_EX_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[10] = Sign_Extend_Instruction_EX_expected_prev[10];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[11] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[11] !== Sign_Extend_Instruction_EX_expected_prev[11] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[11] !== last_Sign_Extend_Instruction_EX_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[11] = Sign_Extend_Instruction_EX_expected_prev[11];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[12] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[12] !== Sign_Extend_Instruction_EX_expected_prev[12] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[12] !== last_Sign_Extend_Instruction_EX_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[12] = Sign_Extend_Instruction_EX_expected_prev[12];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[13] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[13] !== Sign_Extend_Instruction_EX_expected_prev[13] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[13] !== last_Sign_Extend_Instruction_EX_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[13] = Sign_Extend_Instruction_EX_expected_prev[13];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[14] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[14] !== Sign_Extend_Instruction_EX_expected_prev[14] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[14] !== last_Sign_Extend_Instruction_EX_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[14] = Sign_Extend_Instruction_EX_expected_prev[14];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[15] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[15] !== Sign_Extend_Instruction_EX_expected_prev[15] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[15] !== last_Sign_Extend_Instruction_EX_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[15] = Sign_Extend_Instruction_EX_expected_prev[15];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[16] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[16] !== Sign_Extend_Instruction_EX_expected_prev[16] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[16] !== last_Sign_Extend_Instruction_EX_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[16] = Sign_Extend_Instruction_EX_expected_prev[16];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[17] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[17] !== Sign_Extend_Instruction_EX_expected_prev[17] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[17] !== last_Sign_Extend_Instruction_EX_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[17] = Sign_Extend_Instruction_EX_expected_prev[17];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[18] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[18] !== Sign_Extend_Instruction_EX_expected_prev[18] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[18] !== last_Sign_Extend_Instruction_EX_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[18] = Sign_Extend_Instruction_EX_expected_prev[18];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[19] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[19] !== Sign_Extend_Instruction_EX_expected_prev[19] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[19] !== last_Sign_Extend_Instruction_EX_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[19] = Sign_Extend_Instruction_EX_expected_prev[19];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[20] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[20] !== Sign_Extend_Instruction_EX_expected_prev[20] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[20] !== last_Sign_Extend_Instruction_EX_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[20] = Sign_Extend_Instruction_EX_expected_prev[20];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[21] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[21] !== Sign_Extend_Instruction_EX_expected_prev[21] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[21] !== last_Sign_Extend_Instruction_EX_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[21] = Sign_Extend_Instruction_EX_expected_prev[21];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[22] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[22] !== Sign_Extend_Instruction_EX_expected_prev[22] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[22] !== last_Sign_Extend_Instruction_EX_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[22] = Sign_Extend_Instruction_EX_expected_prev[22];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[23] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[23] !== Sign_Extend_Instruction_EX_expected_prev[23] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[23] !== last_Sign_Extend_Instruction_EX_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[23] = Sign_Extend_Instruction_EX_expected_prev[23];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[24] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[24] !== Sign_Extend_Instruction_EX_expected_prev[24] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[24] !== last_Sign_Extend_Instruction_EX_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[24] = Sign_Extend_Instruction_EX_expected_prev[24];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[25] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[25] !== Sign_Extend_Instruction_EX_expected_prev[25] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[25] !== last_Sign_Extend_Instruction_EX_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[25] = Sign_Extend_Instruction_EX_expected_prev[25];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[26] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[26] !== Sign_Extend_Instruction_EX_expected_prev[26] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[26] !== last_Sign_Extend_Instruction_EX_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[26] = Sign_Extend_Instruction_EX_expected_prev[26];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[27] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[27] !== Sign_Extend_Instruction_EX_expected_prev[27] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[27] !== last_Sign_Extend_Instruction_EX_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[27] = Sign_Extend_Instruction_EX_expected_prev[27];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[28] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[28] !== Sign_Extend_Instruction_EX_expected_prev[28] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[28] !== last_Sign_Extend_Instruction_EX_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[28] = Sign_Extend_Instruction_EX_expected_prev[28];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[29] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[29] !== Sign_Extend_Instruction_EX_expected_prev[29] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[29] !== last_Sign_Extend_Instruction_EX_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[29] = Sign_Extend_Instruction_EX_expected_prev[29];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[30] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[30] !== Sign_Extend_Instruction_EX_expected_prev[30] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[30] !== last_Sign_Extend_Instruction_EX_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[30] = Sign_Extend_Instruction_EX_expected_prev[30];
	end
	if (
		( Sign_Extend_Instruction_EX_expected_prev[31] !== 1'bx ) && ( Sign_Extend_Instruction_EX_prev[31] !== Sign_Extend_Instruction_EX_expected_prev[31] )
		&& ((Sign_Extend_Instruction_EX_expected_prev[31] !== last_Sign_Extend_Instruction_EX_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign_Extend_Instruction_EX[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_Extend_Instruction_EX_expected_prev);
		$display ("     Real value = %b", Sign_Extend_Instruction_EX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Sign_Extend_Instruction_EX_exp[31] = Sign_Extend_Instruction_EX_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIPS32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Branch_Dest_MEM;
reg CLOCK_50;
reg PCSrc_MEM;
reg RegWrite_WB;
reg [31:0] Write_Data_WB;
reg [4:0] Write_Register_WB;
// wires                                               
wire [1:0] ALUOp_EX;
wire ALUSrc_EX;
wire Branch_EX;
wire [31:0] Instruction_EX;
wire MemRead_EX;
wire MemWrite_EX;
wire MemtoReg_EX;
wire [31:0] PC_Plus_4_EX;
wire [31:0] Read_Data_1_EX;
wire [31:0] Read_Data_2_EX;
wire RegDst_EX;
wire RegWrite_EX;
wire [31:0] Sign_Extend_Instruction_EX;

wire sampler;                             

// assign statements (if any)                          
MIPS32 i1 (
// port map - connection between master ports and signals/registers   
	.ALUOp_EX(ALUOp_EX),
	.ALUSrc_EX(ALUSrc_EX),
	.Branch_Dest_MEM(Branch_Dest_MEM),
	.Branch_EX(Branch_EX),
	.CLOCK_50(CLOCK_50),
	.Instruction_EX(Instruction_EX),
	.MemRead_EX(MemRead_EX),
	.MemWrite_EX(MemWrite_EX),
	.MemtoReg_EX(MemtoReg_EX),
	.PCSrc_MEM(PCSrc_MEM),
	.PC_Plus_4_EX(PC_Plus_4_EX),
	.Read_Data_1_EX(Read_Data_1_EX),
	.Read_Data_2_EX(Read_Data_2_EX),
	.RegDst_EX(RegDst_EX),
	.RegWrite_EX(RegWrite_EX),
	.RegWrite_WB(RegWrite_WB),
	.Sign_Extend_Instruction_EX(Sign_Extend_Instruction_EX),
	.Write_Data_WB(Write_Data_WB),
	.Write_Register_WB(Write_Register_WB)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #20000 1'b1;
	#20000;
end 

// PCSrc_MEM
initial
begin
	PCSrc_MEM = 1'b0;
end 
// Branch_Dest_MEM[ 31 ]
initial
begin
	Branch_Dest_MEM[31] = 1'b1;
	Branch_Dest_MEM[31] = #80000 1'b0;
	Branch_Dest_MEM[31] = #320000 1'b1;
	Branch_Dest_MEM[31] = #80000 1'b0;
	Branch_Dest_MEM[31] = #80000 1'b1;
	Branch_Dest_MEM[31] = #80000 1'b0;
	Branch_Dest_MEM[31] = #80000 1'b1;
	Branch_Dest_MEM[31] = #80000 1'b0;
	Branch_Dest_MEM[31] = #320000 1'b1;
	Branch_Dest_MEM[31] = #240000 1'b0;
	Branch_Dest_MEM[31] = #80000 1'b1;
	Branch_Dest_MEM[31] = #80000 1'b0;
	Branch_Dest_MEM[31] = #80000 1'b1;
	Branch_Dest_MEM[31] = #80000 1'b0;
	Branch_Dest_MEM[31] = #160000 1'b1;
	Branch_Dest_MEM[31] = #240000 1'b0;
	Branch_Dest_MEM[31] = #320000 1'b1;
	Branch_Dest_MEM[31] = #240000 1'b0;
	Branch_Dest_MEM[31] = #160000 1'b1;
end 
// Branch_Dest_MEM[ 30 ]
initial
begin
	Branch_Dest_MEM[30] = 1'b0;
	Branch_Dest_MEM[30] = #80000 1'b1;
	Branch_Dest_MEM[30] = #160000 1'b0;
	Branch_Dest_MEM[30] = #80000 1'b1;
	Branch_Dest_MEM[30] = #240000 1'b0;
	Branch_Dest_MEM[30] = #240000 1'b1;
	Branch_Dest_MEM[30] = #80000 1'b0;
	Branch_Dest_MEM[30] = #400000 1'b1;
	Branch_Dest_MEM[30] = #80000 1'b0;
	Branch_Dest_MEM[30] = #80000 1'b1;
	Branch_Dest_MEM[30] = #160000 1'b0;
	Branch_Dest_MEM[30] = #320000 1'b1;
	Branch_Dest_MEM[30] = #160000 1'b0;
	Branch_Dest_MEM[30] = #320000 1'b1;
	Branch_Dest_MEM[30] = #80000 1'b0;
	Branch_Dest_MEM[30] = #240000 1'b1;
	Branch_Dest_MEM[30] = #160000 1'b0;
	Branch_Dest_MEM[30] = #80000 1'b1;
end 
// Branch_Dest_MEM[ 29 ]
initial
begin
	Branch_Dest_MEM[29] = 1'b1;
	Branch_Dest_MEM[29] = #160000 1'b0;
	Branch_Dest_MEM[29] = #240000 1'b1;
	Branch_Dest_MEM[29] = #320000 1'b0;
	Branch_Dest_MEM[29] = #240000 1'b1;
	Branch_Dest_MEM[29] = #240000 1'b0;
	Branch_Dest_MEM[29] = #80000 1'b1;
	Branch_Dest_MEM[29] = #160000 1'b0;
	Branch_Dest_MEM[29] = #80000 1'b1;
	Branch_Dest_MEM[29] = #240000 1'b0;
	Branch_Dest_MEM[29] = #80000 1'b1;
	Branch_Dest_MEM[29] = #80000 1'b0;
	Branch_Dest_MEM[29] = #80000 1'b1;
	Branch_Dest_MEM[29] = #80000 1'b0;
	Branch_Dest_MEM[29] = #480000 1'b1;
	Branch_Dest_MEM[29] = #80000 1'b0;
	Branch_Dest_MEM[29] = #80000 1'b1;
	Branch_Dest_MEM[29] = #80000 1'b0;
	Branch_Dest_MEM[29] = #80000 1'b1;
	Branch_Dest_MEM[29] = #80000 1'b0;
end 
// Branch_Dest_MEM[ 28 ]
initial
begin
	Branch_Dest_MEM[28] = 1'b1;
	Branch_Dest_MEM[28] = #160000 1'b0;
	Branch_Dest_MEM[28] = #160000 1'b1;
	Branch_Dest_MEM[28] = #240000 1'b0;
	Branch_Dest_MEM[28] = #80000 1'b1;
	Branch_Dest_MEM[28] = #240000 1'b0;
	Branch_Dest_MEM[28] = #160000 1'b1;
	Branch_Dest_MEM[28] = #80000 1'b0;
	Branch_Dest_MEM[28] = #160000 1'b1;
	Branch_Dest_MEM[28] = #240000 1'b0;
	Branch_Dest_MEM[28] = #160000 1'b1;
	Branch_Dest_MEM[28] = #80000 1'b0;
	Branch_Dest_MEM[28] = #240000 1'b1;
	Branch_Dest_MEM[28] = #240000 1'b0;
	Branch_Dest_MEM[28] = #240000 1'b1;
	Branch_Dest_MEM[28] = #160000 1'b0;
	Branch_Dest_MEM[28] = #80000 1'b1;
	Branch_Dest_MEM[28] = #160000 1'b0;
	Branch_Dest_MEM[28] = #80000 1'b1;
end 
// Branch_Dest_MEM[ 27 ]
initial
begin
	Branch_Dest_MEM[27] = 1'b1;
	Branch_Dest_MEM[27] = #80000 1'b0;
	Branch_Dest_MEM[27] = #80000 1'b1;
	Branch_Dest_MEM[27] = #160000 1'b0;
	Branch_Dest_MEM[27] = #320000 1'b1;
	Branch_Dest_MEM[27] = #80000 1'b0;
	Branch_Dest_MEM[27] = #160000 1'b1;
	Branch_Dest_MEM[27] = #160000 1'b0;
	Branch_Dest_MEM[27] = #160000 1'b1;
	Branch_Dest_MEM[27] = #240000 1'b0;
	Branch_Dest_MEM[27] = #160000 1'b1;
	Branch_Dest_MEM[27] = #240000 1'b0;
	Branch_Dest_MEM[27] = #80000 1'b1;
	Branch_Dest_MEM[27] = #240000 1'b0;
	Branch_Dest_MEM[27] = #240000 1'b1;
	Branch_Dest_MEM[27] = #160000 1'b0;
	Branch_Dest_MEM[27] = #320000 1'b1;
	Branch_Dest_MEM[27] = #80000 1'b0;
end 
// Branch_Dest_MEM[ 26 ]
initial
begin
	Branch_Dest_MEM[26] = 1'b0;
	Branch_Dest_MEM[26] = #320000 1'b1;
	Branch_Dest_MEM[26] = #160000 1'b0;
	Branch_Dest_MEM[26] = #80000 1'b1;
	Branch_Dest_MEM[26] = #80000 1'b0;
	Branch_Dest_MEM[26] = #160000 1'b1;
	Branch_Dest_MEM[26] = #80000 1'b0;
	Branch_Dest_MEM[26] = #80000 1'b1;
	Branch_Dest_MEM[26] = #160000 1'b0;
	Branch_Dest_MEM[26] = #480000 1'b1;
	Branch_Dest_MEM[26] = #240000 1'b0;
	Branch_Dest_MEM[26] = #400000 1'b1;
	Branch_Dest_MEM[26] = #80000 1'b0;
	Branch_Dest_MEM[26] = #160000 1'b1;
	Branch_Dest_MEM[26] = #160000 1'b0;
	Branch_Dest_MEM[26] = #80000 1'b1;
end 
// Branch_Dest_MEM[ 25 ]
initial
begin
	Branch_Dest_MEM[25] = 1'b0;
	Branch_Dest_MEM[25] = #160000 1'b1;
	Branch_Dest_MEM[25] = #160000 1'b0;
	Branch_Dest_MEM[25] = #480000 1'b1;
	Branch_Dest_MEM[25] = #80000 1'b0;
	Branch_Dest_MEM[25] = #160000 1'b1;
	Branch_Dest_MEM[25] = #80000 1'b0;
	Branch_Dest_MEM[25] = #80000 1'b1;
	Branch_Dest_MEM[25] = #80000 1'b0;
	Branch_Dest_MEM[25] = #160000 1'b1;
	Branch_Dest_MEM[25] = #80000 1'b0;
	Branch_Dest_MEM[25] = #80000 1'b1;
	Branch_Dest_MEM[25] = #160000 1'b0;
	Branch_Dest_MEM[25] = #80000 1'b1;
	Branch_Dest_MEM[25] = #160000 1'b0;
	Branch_Dest_MEM[25] = #240000 1'b1;
	Branch_Dest_MEM[25] = #480000 1'b0;
	Branch_Dest_MEM[25] = #240000 1'b1;
end 
// Branch_Dest_MEM[ 24 ]
initial
begin
	Branch_Dest_MEM[24] = 1'b1;
	Branch_Dest_MEM[24] = #160000 1'b0;
	Branch_Dest_MEM[24] = #160000 1'b1;
	Branch_Dest_MEM[24] = #80000 1'b0;
	Branch_Dest_MEM[24] = #160000 1'b1;
	Branch_Dest_MEM[24] = #160000 1'b0;
	Branch_Dest_MEM[24] = #80000 1'b1;
	Branch_Dest_MEM[24] = #80000 1'b0;
	Branch_Dest_MEM[24] = #80000 1'b1;
	Branch_Dest_MEM[24] = #80000 1'b0;
	Branch_Dest_MEM[24] = #160000 1'b1;
	Branch_Dest_MEM[24] = #880000 1'b0;
	Branch_Dest_MEM[24] = #80000 1'b1;
	Branch_Dest_MEM[24] = #80000 1'b0;
	Branch_Dest_MEM[24] = #80000 1'b1;
	Branch_Dest_MEM[24] = #160000 1'b0;
	Branch_Dest_MEM[24] = #80000 1'b1;
	Branch_Dest_MEM[24] = #160000 1'b0;
	Branch_Dest_MEM[24] = #80000 1'b1;
	Branch_Dest_MEM[24] = #80000 1'b0;
end 
// Branch_Dest_MEM[ 23 ]
initial
begin
	Branch_Dest_MEM[23] = 1'b0;
	Branch_Dest_MEM[23] = #80000 1'b1;
	Branch_Dest_MEM[23] = #160000 1'b0;
	Branch_Dest_MEM[23] = #160000 1'b1;
	Branch_Dest_MEM[23] = #160000 1'b0;
	Branch_Dest_MEM[23] = #160000 1'b1;
	Branch_Dest_MEM[23] = #240000 1'b0;
	Branch_Dest_MEM[23] = #80000 1'b1;
	Branch_Dest_MEM[23] = #320000 1'b0;
	Branch_Dest_MEM[23] = #320000 1'b1;
	Branch_Dest_MEM[23] = #480000 1'b0;
	Branch_Dest_MEM[23] = #160000 1'b1;
	Branch_Dest_MEM[23] = #160000 1'b0;
	Branch_Dest_MEM[23] = #320000 1'b1;
end 
// Branch_Dest_MEM[ 22 ]
initial
begin
	Branch_Dest_MEM[22] = 1'b0;
	Branch_Dest_MEM[22] = #160000 1'b1;
	Branch_Dest_MEM[22] = #80000 1'b0;
	Branch_Dest_MEM[22] = #80000 1'b1;
	Branch_Dest_MEM[22] = #320000 1'b0;
	Branch_Dest_MEM[22] = #80000 1'b1;
	Branch_Dest_MEM[22] = #240000 1'b0;
	Branch_Dest_MEM[22] = #160000 1'b1;
	Branch_Dest_MEM[22] = #80000 1'b0;
	Branch_Dest_MEM[22] = #160000 1'b1;
	Branch_Dest_MEM[22] = #480000 1'b0;
	Branch_Dest_MEM[22] = #80000 1'b1;
	Branch_Dest_MEM[22] = #80000 1'b0;
	Branch_Dest_MEM[22] = #240000 1'b1;
	Branch_Dest_MEM[22] = #80000 1'b0;
	Branch_Dest_MEM[22] = #160000 1'b1;
	Branch_Dest_MEM[22] = #80000 1'b0;
	Branch_Dest_MEM[22] = #160000 1'b1;
	Branch_Dest_MEM[22] = #240000 1'b0;
end 
// Branch_Dest_MEM[ 21 ]
initial
begin
	Branch_Dest_MEM[21] = 1'b0;
	Branch_Dest_MEM[21] = #160000 1'b1;
	Branch_Dest_MEM[21] = #160000 1'b0;
	Branch_Dest_MEM[21] = #80000 1'b1;
	Branch_Dest_MEM[21] = #80000 1'b0;
	Branch_Dest_MEM[21] = #80000 1'b1;
	Branch_Dest_MEM[21] = #320000 1'b0;
	Branch_Dest_MEM[21] = #240000 1'b1;
	Branch_Dest_MEM[21] = #80000 1'b0;
	Branch_Dest_MEM[21] = #80000 1'b1;
	Branch_Dest_MEM[21] = #400000 1'b0;
	Branch_Dest_MEM[21] = #80000 1'b1;
	Branch_Dest_MEM[21] = #400000 1'b0;
	Branch_Dest_MEM[21] = #80000 1'b1;
	Branch_Dest_MEM[21] = #160000 1'b0;
	Branch_Dest_MEM[21] = #80000 1'b1;
	Branch_Dest_MEM[21] = #320000 1'b0;
	Branch_Dest_MEM[21] = #160000 1'b1;
end 
// Branch_Dest_MEM[ 20 ]
initial
begin
	Branch_Dest_MEM[20] = 1'b1;
	Branch_Dest_MEM[20] = #80000 1'b0;
	Branch_Dest_MEM[20] = #320000 1'b1;
	Branch_Dest_MEM[20] = #240000 1'b0;
	Branch_Dest_MEM[20] = #160000 1'b1;
	Branch_Dest_MEM[20] = #80000 1'b0;
	Branch_Dest_MEM[20] = #80000 1'b1;
	Branch_Dest_MEM[20] = #240000 1'b0;
	Branch_Dest_MEM[20] = #560000 1'b1;
	Branch_Dest_MEM[20] = #80000 1'b0;
	Branch_Dest_MEM[20] = #80000 1'b1;
	Branch_Dest_MEM[20] = #80000 1'b0;
	Branch_Dest_MEM[20] = #80000 1'b1;
	Branch_Dest_MEM[20] = #160000 1'b0;
	Branch_Dest_MEM[20] = #160000 1'b1;
	Branch_Dest_MEM[20] = #80000 1'b0;
	Branch_Dest_MEM[20] = #80000 1'b1;
	Branch_Dest_MEM[20] = #240000 1'b0;
	Branch_Dest_MEM[20] = #80000 1'b1;
	Branch_Dest_MEM[20] = #80000 1'b0;
end 
// Branch_Dest_MEM[ 19 ]
initial
begin
	Branch_Dest_MEM[19] = 1'b0;
	Branch_Dest_MEM[19] = #80000 1'b1;
	Branch_Dest_MEM[19] = #320000 1'b0;
	Branch_Dest_MEM[19] = #80000 1'b1;
	Branch_Dest_MEM[19] = #80000 1'b0;
	Branch_Dest_MEM[19] = #240000 1'b1;
	Branch_Dest_MEM[19] = #160000 1'b0;
	Branch_Dest_MEM[19] = #80000 1'b1;
	Branch_Dest_MEM[19] = #80000 1'b0;
	Branch_Dest_MEM[19] = #80000 1'b1;
	Branch_Dest_MEM[19] = #240000 1'b0;
	Branch_Dest_MEM[19] = #80000 1'b1;
	Branch_Dest_MEM[19] = #80000 1'b0;
	Branch_Dest_MEM[19] = #80000 1'b1;
	Branch_Dest_MEM[19] = #240000 1'b0;
	Branch_Dest_MEM[19] = #80000 1'b1;
	Branch_Dest_MEM[19] = #160000 1'b0;
	Branch_Dest_MEM[19] = #160000 1'b1;
	Branch_Dest_MEM[19] = #640000 1'b0;
end 
// Branch_Dest_MEM[ 18 ]
initial
begin
	Branch_Dest_MEM[18] = 1'b1;
	Branch_Dest_MEM[18] = #80000 1'b0;
	Branch_Dest_MEM[18] = #80000 1'b1;
	Branch_Dest_MEM[18] = #160000 1'b0;
	Branch_Dest_MEM[18] = #240000 1'b1;
	Branch_Dest_MEM[18] = #400000 1'b0;
	Branch_Dest_MEM[18] = #160000 1'b1;
	Branch_Dest_MEM[18] = #480000 1'b0;
	Branch_Dest_MEM[18] = #80000 1'b1;
	Branch_Dest_MEM[18] = #160000 1'b0;
	Branch_Dest_MEM[18] = #240000 1'b1;
	Branch_Dest_MEM[18] = #80000 1'b0;
	Branch_Dest_MEM[18] = #80000 1'b1;
	Branch_Dest_MEM[18] = #80000 1'b0;
	Branch_Dest_MEM[18] = #160000 1'b1;
	Branch_Dest_MEM[18] = #320000 1'b0;
	Branch_Dest_MEM[18] = #80000 1'b1;
end 
// Branch_Dest_MEM[ 17 ]
initial
begin
	Branch_Dest_MEM[17] = 1'b0;
	Branch_Dest_MEM[17] = #80000 1'b1;
	Branch_Dest_MEM[17] = #80000 1'b0;
	Branch_Dest_MEM[17] = #80000 1'b1;
	Branch_Dest_MEM[17] = #80000 1'b0;
	Branch_Dest_MEM[17] = #80000 1'b1;
	Branch_Dest_MEM[17] = #80000 1'b0;
	Branch_Dest_MEM[17] = #80000 1'b1;
	Branch_Dest_MEM[17] = #80000 1'b0;
	Branch_Dest_MEM[17] = #320000 1'b1;
	Branch_Dest_MEM[17] = #80000 1'b0;
	Branch_Dest_MEM[17] = #160000 1'b1;
	Branch_Dest_MEM[17] = #240000 1'b0;
	Branch_Dest_MEM[17] = #160000 1'b1;
	Branch_Dest_MEM[17] = #80000 1'b0;
	Branch_Dest_MEM[17] = #80000 1'b1;
	Branch_Dest_MEM[17] = #160000 1'b0;
	Branch_Dest_MEM[17] = #160000 1'b1;
	Branch_Dest_MEM[17] = #160000 1'b0;
	Branch_Dest_MEM[17] = #80000 1'b1;
	Branch_Dest_MEM[17] = #160000 1'b0;
	Branch_Dest_MEM[17] = #160000 1'b1;
	Branch_Dest_MEM[17] = #80000 1'b0;
	Branch_Dest_MEM[17] = #240000 1'b1;
end 
// Branch_Dest_MEM[ 16 ]
initial
begin
	Branch_Dest_MEM[16] = 1'b0;
	Branch_Dest_MEM[16] = #80000 1'b1;
	Branch_Dest_MEM[16] = #160000 1'b0;
	Branch_Dest_MEM[16] = #80000 1'b1;
	Branch_Dest_MEM[16] = #80000 1'b0;
	Branch_Dest_MEM[16] = #160000 1'b1;
	Branch_Dest_MEM[16] = #160000 1'b0;
	Branch_Dest_MEM[16] = #160000 1'b1;
	Branch_Dest_MEM[16] = #80000 1'b0;
	Branch_Dest_MEM[16] = #80000 1'b1;
	Branch_Dest_MEM[16] = #80000 1'b0;
	Branch_Dest_MEM[16] = #160000 1'b1;
	Branch_Dest_MEM[16] = #80000 1'b0;
	Branch_Dest_MEM[16] = #80000 1'b1;
	Branch_Dest_MEM[16] = #80000 1'b0;
	Branch_Dest_MEM[16] = #80000 1'b1;
	Branch_Dest_MEM[16] = #80000 1'b0;
	Branch_Dest_MEM[16] = #400000 1'b1;
	Branch_Dest_MEM[16] = #80000 1'b0;
	Branch_Dest_MEM[16] = #240000 1'b1;
end 
// Branch_Dest_MEM[ 15 ]
initial
begin
	Branch_Dest_MEM[15] = 1'b0;
	Branch_Dest_MEM[15] = #80000 1'b1;
	Branch_Dest_MEM[15] = #160000 1'b0;
	Branch_Dest_MEM[15] = #80000 1'b1;
	Branch_Dest_MEM[15] = #320000 1'b0;
	Branch_Dest_MEM[15] = #480000 1'b1;
	Branch_Dest_MEM[15] = #160000 1'b0;
	Branch_Dest_MEM[15] = #240000 1'b1;
	Branch_Dest_MEM[15] = #160000 1'b0;
	Branch_Dest_MEM[15] = #160000 1'b1;
	Branch_Dest_MEM[15] = #80000 1'b0;
	Branch_Dest_MEM[15] = #80000 1'b1;
	Branch_Dest_MEM[15] = #80000 1'b0;
	Branch_Dest_MEM[15] = #80000 1'b1;
	Branch_Dest_MEM[15] = #80000 1'b0;
	Branch_Dest_MEM[15] = #400000 1'b1;
	Branch_Dest_MEM[15] = #160000 1'b0;
	Branch_Dest_MEM[15] = #80000 1'b1;
end 
// Branch_Dest_MEM[ 14 ]
initial
begin
	Branch_Dest_MEM[14] = 1'b1;
	Branch_Dest_MEM[14] = #80000 1'b0;
	Branch_Dest_MEM[14] = #80000 1'b1;
	Branch_Dest_MEM[14] = #240000 1'b0;
	Branch_Dest_MEM[14] = #240000 1'b1;
	Branch_Dest_MEM[14] = #80000 1'b0;
	Branch_Dest_MEM[14] = #240000 1'b1;
	Branch_Dest_MEM[14] = #160000 1'b0;
	Branch_Dest_MEM[14] = #80000 1'b1;
	Branch_Dest_MEM[14] = #80000 1'b0;
	Branch_Dest_MEM[14] = #80000 1'b1;
	Branch_Dest_MEM[14] = #80000 1'b0;
	Branch_Dest_MEM[14] = #80000 1'b1;
	Branch_Dest_MEM[14] = #160000 1'b0;
	Branch_Dest_MEM[14] = #240000 1'b1;
	Branch_Dest_MEM[14] = #160000 1'b0;
	Branch_Dest_MEM[14] = #160000 1'b1;
	Branch_Dest_MEM[14] = #80000 1'b0;
	Branch_Dest_MEM[14] = #80000 1'b1;
	Branch_Dest_MEM[14] = #240000 1'b0;
	Branch_Dest_MEM[14] = #80000 1'b1;
	Branch_Dest_MEM[14] = #160000 1'b0;
end 
// Branch_Dest_MEM[ 13 ]
initial
begin
	Branch_Dest_MEM[13] = 1'b0;
	Branch_Dest_MEM[13] = #80000 1'b1;
	Branch_Dest_MEM[13] = #80000 1'b0;
	Branch_Dest_MEM[13] = #80000 1'b1;
	Branch_Dest_MEM[13] = #80000 1'b0;
	Branch_Dest_MEM[13] = #480000 1'b1;
	Branch_Dest_MEM[13] = #80000 1'b0;
	Branch_Dest_MEM[13] = #80000 1'b1;
	Branch_Dest_MEM[13] = #80000 1'b0;
	Branch_Dest_MEM[13] = #400000 1'b1;
	Branch_Dest_MEM[13] = #80000 1'b0;
	Branch_Dest_MEM[13] = #160000 1'b1;
	Branch_Dest_MEM[13] = #160000 1'b0;
	Branch_Dest_MEM[13] = #80000 1'b1;
	Branch_Dest_MEM[13] = #80000 1'b0;
	Branch_Dest_MEM[13] = #320000 1'b1;
	Branch_Dest_MEM[13] = #80000 1'b0;
	Branch_Dest_MEM[13] = #240000 1'b1;
	Branch_Dest_MEM[13] = #240000 1'b0;
	Branch_Dest_MEM[13] = #80000 1'b1;
end 
// Branch_Dest_MEM[ 12 ]
initial
begin
	Branch_Dest_MEM[12] = 1'b0;
	Branch_Dest_MEM[12] = #400000 1'b1;
	Branch_Dest_MEM[12] = #160000 1'b0;
	Branch_Dest_MEM[12] = #160000 1'b1;
	Branch_Dest_MEM[12] = #80000 1'b0;
	Branch_Dest_MEM[12] = #80000 1'b1;
	Branch_Dest_MEM[12] = #80000 1'b0;
	Branch_Dest_MEM[12] = #80000 1'b1;
	Branch_Dest_MEM[12] = #240000 1'b0;
	Branch_Dest_MEM[12] = #160000 1'b1;
	Branch_Dest_MEM[12] = #80000 1'b0;
	Branch_Dest_MEM[12] = #160000 1'b1;
	Branch_Dest_MEM[12] = #80000 1'b0;
	Branch_Dest_MEM[12] = #480000 1'b1;
	Branch_Dest_MEM[12] = #240000 1'b0;
	Branch_Dest_MEM[12] = #160000 1'b1;
	Branch_Dest_MEM[12] = #160000 1'b0;
	Branch_Dest_MEM[12] = #160000 1'b1;
end 
// Branch_Dest_MEM[ 11 ]
initial
begin
	Branch_Dest_MEM[11] = 1'b1;
	Branch_Dest_MEM[11] = #80000 1'b0;
	Branch_Dest_MEM[11] = #160000 1'b1;
	Branch_Dest_MEM[11] = #80000 1'b0;
	Branch_Dest_MEM[11] = #80000 1'b1;
	Branch_Dest_MEM[11] = #80000 1'b0;
	Branch_Dest_MEM[11] = #160000 1'b1;
	Branch_Dest_MEM[11] = #80000 1'b0;
	Branch_Dest_MEM[11] = #80000 1'b1;
	Branch_Dest_MEM[11] = #80000 1'b0;
	Branch_Dest_MEM[11] = #80000 1'b1;
	Branch_Dest_MEM[11] = #80000 1'b0;
	Branch_Dest_MEM[11] = #80000 1'b1;
	Branch_Dest_MEM[11] = #240000 1'b0;
	Branch_Dest_MEM[11] = #800000 1'b1;
	Branch_Dest_MEM[11] = #320000 1'b0;
	Branch_Dest_MEM[11] = #80000 1'b1;
	Branch_Dest_MEM[11] = #80000 1'b0;
	Branch_Dest_MEM[11] = #80000 1'b1;
	Branch_Dest_MEM[11] = #240000 1'b0;
end 
// Branch_Dest_MEM[ 10 ]
initial
begin
	Branch_Dest_MEM[10] = 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #80000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #80000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #240000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #160000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #160000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #80000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #160000 1'b0;
	Branch_Dest_MEM[10] = #320000 1'b1;
	Branch_Dest_MEM[10] = #80000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #160000 1'b0;
	Branch_Dest_MEM[10] = #160000 1'b1;
	Branch_Dest_MEM[10] = #160000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #80000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #80000 1'b0;
	Branch_Dest_MEM[10] = #80000 1'b1;
	Branch_Dest_MEM[10] = #80000 1'b0;
end 
// Branch_Dest_MEM[ 9 ]
initial
begin
	Branch_Dest_MEM[9] = 1'b1;
	Branch_Dest_MEM[9] = #80000 1'b0;
	Branch_Dest_MEM[9] = #160000 1'b1;
	Branch_Dest_MEM[9] = #80000 1'b0;
	Branch_Dest_MEM[9] = #320000 1'b1;
	Branch_Dest_MEM[9] = #80000 1'b0;
	Branch_Dest_MEM[9] = #400000 1'b1;
	Branch_Dest_MEM[9] = #80000 1'b0;
	Branch_Dest_MEM[9] = #560000 1'b1;
	Branch_Dest_MEM[9] = #80000 1'b0;
	Branch_Dest_MEM[9] = #80000 1'b1;
	Branch_Dest_MEM[9] = #80000 1'b0;
	Branch_Dest_MEM[9] = #160000 1'b1;
	Branch_Dest_MEM[9] = #160000 1'b0;
	Branch_Dest_MEM[9] = #80000 1'b1;
	Branch_Dest_MEM[9] = #240000 1'b0;
	Branch_Dest_MEM[9] = #160000 1'b1;
end 
// Branch_Dest_MEM[ 8 ]
initial
begin
	Branch_Dest_MEM[8] = 1'b1;
	Branch_Dest_MEM[8] = #240000 1'b0;
	Branch_Dest_MEM[8] = #80000 1'b1;
	Branch_Dest_MEM[8] = #240000 1'b0;
	Branch_Dest_MEM[8] = #400000 1'b1;
	Branch_Dest_MEM[8] = #160000 1'b0;
	Branch_Dest_MEM[8] = #320000 1'b1;
	Branch_Dest_MEM[8] = #320000 1'b0;
	Branch_Dest_MEM[8] = #80000 1'b1;
	Branch_Dest_MEM[8] = #240000 1'b0;
	Branch_Dest_MEM[8] = #160000 1'b1;
	Branch_Dest_MEM[8] = #480000 1'b0;
	Branch_Dest_MEM[8] = #160000 1'b1;
end 
// Branch_Dest_MEM[ 7 ]
initial
begin
	Branch_Dest_MEM[7] = 1'b1;
	Branch_Dest_MEM[7] = #240000 1'b0;
	Branch_Dest_MEM[7] = #240000 1'b1;
	Branch_Dest_MEM[7] = #80000 1'b0;
	Branch_Dest_MEM[7] = #80000 1'b1;
	Branch_Dest_MEM[7] = #160000 1'b0;
	Branch_Dest_MEM[7] = #160000 1'b1;
	Branch_Dest_MEM[7] = #80000 1'b0;
	Branch_Dest_MEM[7] = #320000 1'b1;
	Branch_Dest_MEM[7] = #80000 1'b0;
	Branch_Dest_MEM[7] = #160000 1'b1;
	Branch_Dest_MEM[7] = #480000 1'b0;
	Branch_Dest_MEM[7] = #320000 1'b1;
	Branch_Dest_MEM[7] = #80000 1'b0;
	Branch_Dest_MEM[7] = #160000 1'b1;
	Branch_Dest_MEM[7] = #160000 1'b0;
end 
// Branch_Dest_MEM[ 6 ]
initial
begin
	Branch_Dest_MEM[6] = 1'b1;
	Branch_Dest_MEM[6] = #160000 1'b0;
	Branch_Dest_MEM[6] = #480000 1'b1;
	Branch_Dest_MEM[6] = #240000 1'b0;
	Branch_Dest_MEM[6] = #80000 1'b1;
	Branch_Dest_MEM[6] = #80000 1'b0;
	Branch_Dest_MEM[6] = #400000 1'b1;
	Branch_Dest_MEM[6] = #80000 1'b0;
	Branch_Dest_MEM[6] = #80000 1'b1;
	Branch_Dest_MEM[6] = #80000 1'b0;
	Branch_Dest_MEM[6] = #160000 1'b1;
	Branch_Dest_MEM[6] = #80000 1'b0;
	Branch_Dest_MEM[6] = #80000 1'b1;
	Branch_Dest_MEM[6] = #80000 1'b0;
	Branch_Dest_MEM[6] = #80000 1'b1;
	Branch_Dest_MEM[6] = #160000 1'b0;
	Branch_Dest_MEM[6] = #80000 1'b1;
	Branch_Dest_MEM[6] = #80000 1'b0;
	Branch_Dest_MEM[6] = #160000 1'b1;
	Branch_Dest_MEM[6] = #160000 1'b0;
end 
// Branch_Dest_MEM[ 5 ]
initial
begin
	Branch_Dest_MEM[5] = 1'b0;
	Branch_Dest_MEM[5] = #80000 1'b1;
	Branch_Dest_MEM[5] = #80000 1'b0;
	Branch_Dest_MEM[5] = #80000 1'b1;
	Branch_Dest_MEM[5] = #240000 1'b0;
	Branch_Dest_MEM[5] = #80000 1'b1;
	Branch_Dest_MEM[5] = #320000 1'b0;
	Branch_Dest_MEM[5] = #80000 1'b1;
	Branch_Dest_MEM[5] = #320000 1'b0;
	Branch_Dest_MEM[5] = #240000 1'b1;
	Branch_Dest_MEM[5] = #80000 1'b0;
	Branch_Dest_MEM[5] = #160000 1'b1;
	Branch_Dest_MEM[5] = #80000 1'b0;
	Branch_Dest_MEM[5] = #400000 1'b1;
	Branch_Dest_MEM[5] = #640000 1'b0;
end 
// Branch_Dest_MEM[ 4 ]
initial
begin
	Branch_Dest_MEM[4] = 1'b1;
	Branch_Dest_MEM[4] = #400000 1'b0;
	Branch_Dest_MEM[4] = #160000 1'b1;
	Branch_Dest_MEM[4] = #80000 1'b0;
	Branch_Dest_MEM[4] = #80000 1'b1;
	Branch_Dest_MEM[4] = #80000 1'b0;
	Branch_Dest_MEM[4] = #240000 1'b1;
	Branch_Dest_MEM[4] = #80000 1'b0;
	Branch_Dest_MEM[4] = #80000 1'b1;
	Branch_Dest_MEM[4] = #80000 1'b0;
	Branch_Dest_MEM[4] = #160000 1'b1;
	Branch_Dest_MEM[4] = #160000 1'b0;
	Branch_Dest_MEM[4] = #80000 1'b1;
	Branch_Dest_MEM[4] = #80000 1'b0;
	Branch_Dest_MEM[4] = #400000 1'b1;
	Branch_Dest_MEM[4] = #80000 1'b0;
	Branch_Dest_MEM[4] = #320000 1'b1;
	Branch_Dest_MEM[4] = #80000 1'b0;
	Branch_Dest_MEM[4] = #160000 1'b1;
end 
// Branch_Dest_MEM[ 3 ]
initial
begin
	Branch_Dest_MEM[3] = 1'b1;
	Branch_Dest_MEM[3] = #240000 1'b0;
	Branch_Dest_MEM[3] = #80000 1'b1;
	Branch_Dest_MEM[3] = #80000 1'b0;
	Branch_Dest_MEM[3] = #80000 1'b1;
	Branch_Dest_MEM[3] = #80000 1'b0;
	Branch_Dest_MEM[3] = #80000 1'b1;
	Branch_Dest_MEM[3] = #240000 1'b0;
	Branch_Dest_MEM[3] = #160000 1'b1;
	Branch_Dest_MEM[3] = #240000 1'b0;
	Branch_Dest_MEM[3] = #160000 1'b1;
	Branch_Dest_MEM[3] = #160000 1'b0;
	Branch_Dest_MEM[3] = #80000 1'b1;
	Branch_Dest_MEM[3] = #160000 1'b0;
	Branch_Dest_MEM[3] = #240000 1'b1;
	Branch_Dest_MEM[3] = #160000 1'b0;
	Branch_Dest_MEM[3] = #160000 1'b1;
	Branch_Dest_MEM[3] = #320000 1'b0;
	Branch_Dest_MEM[3] = #80000 1'b1;
	Branch_Dest_MEM[3] = #80000 1'b0;
	Branch_Dest_MEM[3] = #80000 1'b1;
end 
// Branch_Dest_MEM[ 2 ]
initial
begin
	Branch_Dest_MEM[2] = 1'b1;
	Branch_Dest_MEM[2] = #80000 1'b0;
	Branch_Dest_MEM[2] = #160000 1'b1;
	Branch_Dest_MEM[2] = #80000 1'b0;
	Branch_Dest_MEM[2] = #80000 1'b1;
	Branch_Dest_MEM[2] = #80000 1'b0;
	Branch_Dest_MEM[2] = #80000 1'b1;
	Branch_Dest_MEM[2] = #80000 1'b0;
	Branch_Dest_MEM[2] = #400000 1'b1;
	Branch_Dest_MEM[2] = #160000 1'b0;
	Branch_Dest_MEM[2] = #240000 1'b1;
	Branch_Dest_MEM[2] = #80000 1'b0;
	Branch_Dest_MEM[2] = #320000 1'b1;
	Branch_Dest_MEM[2] = #240000 1'b0;
	Branch_Dest_MEM[2] = #320000 1'b1;
	Branch_Dest_MEM[2] = #80000 1'b0;
	Branch_Dest_MEM[2] = #80000 1'b1;
	Branch_Dest_MEM[2] = #80000 1'b0;
	Branch_Dest_MEM[2] = #320000 1'b1;
end 
// Branch_Dest_MEM[ 1 ]
initial
begin
	Branch_Dest_MEM[1] = 1'b1;
	Branch_Dest_MEM[1] = #240000 1'b0;
	Branch_Dest_MEM[1] = #160000 1'b1;
	Branch_Dest_MEM[1] = #80000 1'b0;
	Branch_Dest_MEM[1] = #160000 1'b1;
	Branch_Dest_MEM[1] = #160000 1'b0;
	Branch_Dest_MEM[1] = #80000 1'b1;
	Branch_Dest_MEM[1] = #80000 1'b0;
	Branch_Dest_MEM[1] = #400000 1'b1;
	Branch_Dest_MEM[1] = #80000 1'b0;
	Branch_Dest_MEM[1] = #560000 1'b1;
	Branch_Dest_MEM[1] = #80000 1'b0;
	Branch_Dest_MEM[1] = #160000 1'b1;
	Branch_Dest_MEM[1] = #80000 1'b0;
	Branch_Dest_MEM[1] = #80000 1'b1;
	Branch_Dest_MEM[1] = #80000 1'b0;
	Branch_Dest_MEM[1] = #80000 1'b1;
	Branch_Dest_MEM[1] = #80000 1'b0;
	Branch_Dest_MEM[1] = #160000 1'b1;
	Branch_Dest_MEM[1] = #80000 1'b0;
	Branch_Dest_MEM[1] = #80000 1'b1;
end 
// Branch_Dest_MEM[ 0 ]
initial
begin
	Branch_Dest_MEM[0] = 1'b0;
	Branch_Dest_MEM[0] = #240000 1'b1;
	Branch_Dest_MEM[0] = #80000 1'b0;
	Branch_Dest_MEM[0] = #80000 1'b1;
	Branch_Dest_MEM[0] = #320000 1'b0;
	Branch_Dest_MEM[0] = #160000 1'b1;
	Branch_Dest_MEM[0] = #400000 1'b0;
	Branch_Dest_MEM[0] = #240000 1'b1;
	Branch_Dest_MEM[0] = #80000 1'b0;
	Branch_Dest_MEM[0] = #80000 1'b1;
	Branch_Dest_MEM[0] = #160000 1'b0;
	Branch_Dest_MEM[0] = #320000 1'b1;
	Branch_Dest_MEM[0] = #80000 1'b0;
	Branch_Dest_MEM[0] = #80000 1'b1;
	Branch_Dest_MEM[0] = #400000 1'b0;
	Branch_Dest_MEM[0] = #80000 1'b1;
end 

// RegWrite_WB
initial
begin
	RegWrite_WB = 1'b0;
end 
// Write_Register_WB[ 4 ]
initial
begin
	Write_Register_WB[4] = 1'b0;
end 
// Write_Register_WB[ 3 ]
initial
begin
	Write_Register_WB[3] = 1'b0;
end 
// Write_Register_WB[ 2 ]
initial
begin
	Write_Register_WB[2] = 1'b0;
end 
// Write_Register_WB[ 1 ]
initial
begin
	Write_Register_WB[1] = 1'b0;
end 
// Write_Register_WB[ 0 ]
initial
begin
	Write_Register_WB[0] = 1'b0;
end 
// Write_Data_WB[ 31 ]
initial
begin
	Write_Data_WB[31] = 1'b1;
	Write_Data_WB[31] = #80000 1'b0;
	Write_Data_WB[31] = #160000 1'b1;
	Write_Data_WB[31] = #320000 1'b0;
	Write_Data_WB[31] = #480000 1'b1;
	Write_Data_WB[31] = #240000 1'b0;
	Write_Data_WB[31] = #80000 1'b1;
	Write_Data_WB[31] = #80000 1'b0;
	Write_Data_WB[31] = #160000 1'b1;
	Write_Data_WB[31] = #80000 1'b0;
	Write_Data_WB[31] = #320000 1'b1;
	Write_Data_WB[31] = #80000 1'b0;
	Write_Data_WB[31] = #320000 1'b1;
	Write_Data_WB[31] = #80000 1'b0;
	Write_Data_WB[31] = #80000 1'b1;
	Write_Data_WB[31] = #160000 1'b0;
	Write_Data_WB[31] = #240000 1'b1;
end 
// Write_Data_WB[ 30 ]
initial
begin
	Write_Data_WB[30] = 1'b0;
	Write_Data_WB[30] = #160000 1'b1;
	Write_Data_WB[30] = #80000 1'b0;
	Write_Data_WB[30] = #240000 1'b1;
	Write_Data_WB[30] = #320000 1'b0;
	Write_Data_WB[30] = #160000 1'b1;
	Write_Data_WB[30] = #160000 1'b0;
	Write_Data_WB[30] = #80000 1'b1;
	Write_Data_WB[30] = #240000 1'b0;
	Write_Data_WB[30] = #160000 1'b1;
	Write_Data_WB[30] = #400000 1'b0;
	Write_Data_WB[30] = #160000 1'b1;
	Write_Data_WB[30] = #240000 1'b0;
	Write_Data_WB[30] = #240000 1'b1;
	Write_Data_WB[30] = #160000 1'b0;
end 
// Write_Data_WB[ 29 ]
initial
begin
	Write_Data_WB[29] = 1'b1;
	Write_Data_WB[29] = #80000 1'b0;
	Write_Data_WB[29] = #80000 1'b1;
	Write_Data_WB[29] = #80000 1'b0;
	Write_Data_WB[29] = #160000 1'b1;
	Write_Data_WB[29] = #160000 1'b0;
	Write_Data_WB[29] = #240000 1'b1;
	Write_Data_WB[29] = #160000 1'b0;
	Write_Data_WB[29] = #80000 1'b1;
	Write_Data_WB[29] = #80000 1'b0;
	Write_Data_WB[29] = #160000 1'b1;
	Write_Data_WB[29] = #80000 1'b0;
	Write_Data_WB[29] = #160000 1'b1;
	Write_Data_WB[29] = #80000 1'b0;
	Write_Data_WB[29] = #160000 1'b1;
	Write_Data_WB[29] = #240000 1'b0;
	Write_Data_WB[29] = #80000 1'b1;
	Write_Data_WB[29] = #80000 1'b0;
	Write_Data_WB[29] = #80000 1'b1;
	Write_Data_WB[29] = #160000 1'b0;
	Write_Data_WB[29] = #80000 1'b1;
	Write_Data_WB[29] = #160000 1'b0;
	Write_Data_WB[29] = #160000 1'b1;
end 
// Write_Data_WB[ 28 ]
initial
begin
	Write_Data_WB[28] = 1'b1;
	Write_Data_WB[28] = #160000 1'b0;
	Write_Data_WB[28] = #80000 1'b1;
	Write_Data_WB[28] = #80000 1'b0;
	Write_Data_WB[28] = #80000 1'b1;
	Write_Data_WB[28] = #400000 1'b0;
	Write_Data_WB[28] = #80000 1'b1;
	Write_Data_WB[28] = #80000 1'b0;
	Write_Data_WB[28] = #240000 1'b1;
	Write_Data_WB[28] = #160000 1'b0;
	Write_Data_WB[28] = #160000 1'b1;
	Write_Data_WB[28] = #80000 1'b0;
	Write_Data_WB[28] = #80000 1'b1;
	Write_Data_WB[28] = #240000 1'b0;
	Write_Data_WB[28] = #240000 1'b1;
	Write_Data_WB[28] = #160000 1'b0;
	Write_Data_WB[28] = #80000 1'b1;
	Write_Data_WB[28] = #80000 1'b0;
	Write_Data_WB[28] = #80000 1'b1;
	Write_Data_WB[28] = #160000 1'b0;
	Write_Data_WB[28] = #240000 1'b1;
end 
// Write_Data_WB[ 27 ]
initial
begin
	Write_Data_WB[27] = 1'b0;
	Write_Data_WB[27] = #160000 1'b1;
	Write_Data_WB[27] = #160000 1'b0;
	Write_Data_WB[27] = #160000 1'b1;
	Write_Data_WB[27] = #480000 1'b0;
	Write_Data_WB[27] = #80000 1'b1;
	Write_Data_WB[27] = #80000 1'b0;
	Write_Data_WB[27] = #80000 1'b1;
	Write_Data_WB[27] = #320000 1'b0;
	Write_Data_WB[27] = #240000 1'b1;
	Write_Data_WB[27] = #80000 1'b0;
	Write_Data_WB[27] = #80000 1'b1;
	Write_Data_WB[27] = #80000 1'b0;
	Write_Data_WB[27] = #80000 1'b1;
	Write_Data_WB[27] = #640000 1'b0;
	Write_Data_WB[27] = #160000 1'b1;
end 
// Write_Data_WB[ 26 ]
initial
begin
	Write_Data_WB[26] = 1'b0;
	Write_Data_WB[26] = #80000 1'b1;
	Write_Data_WB[26] = #320000 1'b0;
	Write_Data_WB[26] = #80000 1'b1;
	Write_Data_WB[26] = #80000 1'b0;
	Write_Data_WB[26] = #80000 1'b1;
	Write_Data_WB[26] = #240000 1'b0;
	Write_Data_WB[26] = #160000 1'b1;
	Write_Data_WB[26] = #240000 1'b0;
	Write_Data_WB[26] = #320000 1'b1;
	Write_Data_WB[26] = #80000 1'b0;
	Write_Data_WB[26] = #160000 1'b1;
	Write_Data_WB[26] = #80000 1'b0;
	Write_Data_WB[26] = #160000 1'b1;
	Write_Data_WB[26] = #160000 1'b0;
	Write_Data_WB[26] = #480000 1'b1;
	Write_Data_WB[26] = #80000 1'b0;
end 
// Write_Data_WB[ 25 ]
initial
begin
	Write_Data_WB[25] = 1'b1;
	Write_Data_WB[25] = #80000 1'b0;
	Write_Data_WB[25] = #80000 1'b1;
	Write_Data_WB[25] = #80000 1'b0;
	Write_Data_WB[25] = #400000 1'b1;
	Write_Data_WB[25] = #240000 1'b0;
	Write_Data_WB[25] = #160000 1'b1;
	Write_Data_WB[25] = #80000 1'b0;
	Write_Data_WB[25] = #80000 1'b1;
	Write_Data_WB[25] = #160000 1'b0;
	Write_Data_WB[25] = #240000 1'b1;
	Write_Data_WB[25] = #80000 1'b0;
	Write_Data_WB[25] = #480000 1'b1;
	Write_Data_WB[25] = #80000 1'b0;
	Write_Data_WB[25] = #160000 1'b1;
	Write_Data_WB[25] = #160000 1'b0;
	Write_Data_WB[25] = #160000 1'b1;
	Write_Data_WB[25] = #160000 1'b0;
	Write_Data_WB[25] = #80000 1'b1;
end 
// Write_Data_WB[ 24 ]
initial
begin
	Write_Data_WB[24] = 1'b1;
	Write_Data_WB[24] = #240000 1'b0;
	Write_Data_WB[24] = #160000 1'b1;
	Write_Data_WB[24] = #80000 1'b0;
	Write_Data_WB[24] = #80000 1'b1;
	Write_Data_WB[24] = #160000 1'b0;
	Write_Data_WB[24] = #80000 1'b1;
	Write_Data_WB[24] = #80000 1'b0;
	Write_Data_WB[24] = #80000 1'b1;
	Write_Data_WB[24] = #80000 1'b0;
	Write_Data_WB[24] = #80000 1'b1;
	Write_Data_WB[24] = #80000 1'b0;
	Write_Data_WB[24] = #160000 1'b1;
	Write_Data_WB[24] = #80000 1'b0;
	Write_Data_WB[24] = #80000 1'b1;
	Write_Data_WB[24] = #80000 1'b0;
	Write_Data_WB[24] = #640000 1'b1;
end 
// Write_Data_WB[ 23 ]
initial
begin
	Write_Data_WB[23] = 1'b1;
	Write_Data_WB[23] = #160000 1'b0;
	Write_Data_WB[23] = #80000 1'b1;
	Write_Data_WB[23] = #80000 1'b0;
	Write_Data_WB[23] = #160000 1'b1;
	Write_Data_WB[23] = #320000 1'b0;
	Write_Data_WB[23] = #80000 1'b1;
	Write_Data_WB[23] = #80000 1'b0;
	Write_Data_WB[23] = #80000 1'b1;
	Write_Data_WB[23] = #80000 1'b0;
	Write_Data_WB[23] = #80000 1'b1;
	Write_Data_WB[23] = #80000 1'b0;
	Write_Data_WB[23] = #160000 1'b1;
	Write_Data_WB[23] = #80000 1'b0;
	Write_Data_WB[23] = #80000 1'b1;
	Write_Data_WB[23] = #80000 1'b0;
	Write_Data_WB[23] = #80000 1'b1;
	Write_Data_WB[23] = #240000 1'b0;
	Write_Data_WB[23] = #240000 1'b1;
	Write_Data_WB[23] = #80000 1'b0;
	Write_Data_WB[23] = #80000 1'b1;
	Write_Data_WB[23] = #560000 1'b0;
end 
// Write_Data_WB[ 22 ]
initial
begin
	Write_Data_WB[22] = 1'b1;
	Write_Data_WB[22] = #80000 1'b0;
	Write_Data_WB[22] = #160000 1'b1;
	Write_Data_WB[22] = #320000 1'b0;
	Write_Data_WB[22] = #240000 1'b1;
	Write_Data_WB[22] = #80000 1'b0;
	Write_Data_WB[22] = #240000 1'b1;
	Write_Data_WB[22] = #80000 1'b0;
	Write_Data_WB[22] = #160000 1'b1;
	Write_Data_WB[22] = #160000 1'b0;
	Write_Data_WB[22] = #160000 1'b1;
	Write_Data_WB[22] = #80000 1'b0;
	Write_Data_WB[22] = #80000 1'b1;
	Write_Data_WB[22] = #80000 1'b0;
	Write_Data_WB[22] = #80000 1'b1;
	Write_Data_WB[22] = #80000 1'b0;
	Write_Data_WB[22] = #80000 1'b1;
	Write_Data_WB[22] = #160000 1'b0;
	Write_Data_WB[22] = #80000 1'b1;
	Write_Data_WB[22] = #240000 1'b0;
	Write_Data_WB[22] = #80000 1'b1;
	Write_Data_WB[22] = #160000 1'b0;
	Write_Data_WB[22] = #80000 1'b1;
end 
// Write_Data_WB[ 21 ]
initial
begin
	Write_Data_WB[21] = 1'b1;
	Write_Data_WB[21] = #80000 1'b0;
	Write_Data_WB[21] = #240000 1'b1;
	Write_Data_WB[21] = #80000 1'b0;
	Write_Data_WB[21] = #160000 1'b1;
	Write_Data_WB[21] = #80000 1'b0;
	Write_Data_WB[21] = #320000 1'b1;
	Write_Data_WB[21] = #400000 1'b0;
	Write_Data_WB[21] = #240000 1'b1;
	Write_Data_WB[21] = #160000 1'b0;
	Write_Data_WB[21] = #80000 1'b1;
	Write_Data_WB[21] = #80000 1'b0;
	Write_Data_WB[21] = #160000 1'b1;
	Write_Data_WB[21] = #80000 1'b0;
	Write_Data_WB[21] = #160000 1'b1;
	Write_Data_WB[21] = #80000 1'b0;
	Write_Data_WB[21] = #240000 1'b1;
	Write_Data_WB[21] = #240000 1'b0;
end 
// Write_Data_WB[ 20 ]
initial
begin
	Write_Data_WB[20] = 1'b1;
	Write_Data_WB[20] = #160000 1'b0;
	Write_Data_WB[20] = #320000 1'b1;
	Write_Data_WB[20] = #80000 1'b0;
	Write_Data_WB[20] = #80000 1'b1;
	Write_Data_WB[20] = #80000 1'b0;
	Write_Data_WB[20] = #160000 1'b1;
	Write_Data_WB[20] = #400000 1'b0;
	Write_Data_WB[20] = #80000 1'b1;
	Write_Data_WB[20] = #240000 1'b0;
	Write_Data_WB[20] = #80000 1'b1;
	Write_Data_WB[20] = #80000 1'b0;
	Write_Data_WB[20] = #160000 1'b1;
	Write_Data_WB[20] = #80000 1'b0;
	Write_Data_WB[20] = #160000 1'b1;
	Write_Data_WB[20] = #320000 1'b0;
	Write_Data_WB[20] = #80000 1'b1;
	Write_Data_WB[20] = #240000 1'b0;
	Write_Data_WB[20] = #160000 1'b1;
end 
// Write_Data_WB[ 19 ]
initial
begin
	Write_Data_WB[19] = 1'b1;
	Write_Data_WB[19] = #160000 1'b0;
	Write_Data_WB[19] = #80000 1'b1;
	Write_Data_WB[19] = #80000 1'b0;
	Write_Data_WB[19] = #80000 1'b1;
	Write_Data_WB[19] = #80000 1'b0;
	Write_Data_WB[19] = #80000 1'b1;
	Write_Data_WB[19] = #240000 1'b0;
	Write_Data_WB[19] = #240000 1'b1;
	Write_Data_WB[19] = #80000 1'b0;
	Write_Data_WB[19] = #320000 1'b1;
	Write_Data_WB[19] = #80000 1'b0;
	Write_Data_WB[19] = #400000 1'b1;
	Write_Data_WB[19] = #80000 1'b0;
	Write_Data_WB[19] = #80000 1'b1;
	Write_Data_WB[19] = #80000 1'b0;
	Write_Data_WB[19] = #80000 1'b1;
	Write_Data_WB[19] = #160000 1'b0;
	Write_Data_WB[19] = #480000 1'b1;
end 
// Write_Data_WB[ 18 ]
initial
begin
	Write_Data_WB[18] = 1'b0;
	Write_Data_WB[18] = #80000 1'b1;
	Write_Data_WB[18] = #240000 1'b0;
	Write_Data_WB[18] = #400000 1'b1;
	Write_Data_WB[18] = #160000 1'b0;
	Write_Data_WB[18] = #160000 1'b1;
	Write_Data_WB[18] = #80000 1'b0;
	Write_Data_WB[18] = #80000 1'b1;
	Write_Data_WB[18] = #80000 1'b0;
	Write_Data_WB[18] = #80000 1'b1;
	Write_Data_WB[18] = #160000 1'b0;
	Write_Data_WB[18] = #80000 1'b1;
	Write_Data_WB[18] = #160000 1'b0;
	Write_Data_WB[18] = #160000 1'b1;
	Write_Data_WB[18] = #80000 1'b0;
	Write_Data_WB[18] = #80000 1'b1;
	Write_Data_WB[18] = #160000 1'b0;
	Write_Data_WB[18] = #240000 1'b1;
	Write_Data_WB[18] = #240000 1'b0;
end 
// Write_Data_WB[ 17 ]
initial
begin
	Write_Data_WB[17] = 1'b0;
	Write_Data_WB[17] = #80000 1'b1;
	Write_Data_WB[17] = #80000 1'b0;
	Write_Data_WB[17] = #80000 1'b1;
	Write_Data_WB[17] = #160000 1'b0;
	Write_Data_WB[17] = #160000 1'b1;
	Write_Data_WB[17] = #80000 1'b0;
	Write_Data_WB[17] = #240000 1'b1;
	Write_Data_WB[17] = #240000 1'b0;
	Write_Data_WB[17] = #80000 1'b1;
	Write_Data_WB[17] = #480000 1'b0;
	Write_Data_WB[17] = #80000 1'b1;
	Write_Data_WB[17] = #160000 1'b0;
	Write_Data_WB[17] = #160000 1'b1;
	Write_Data_WB[17] = #80000 1'b0;
	Write_Data_WB[17] = #80000 1'b1;
	Write_Data_WB[17] = #80000 1'b0;
	Write_Data_WB[17] = #80000 1'b1;
	Write_Data_WB[17] = #80000 1'b0;
	Write_Data_WB[17] = #80000 1'b1;
	Write_Data_WB[17] = #80000 1'b0;
end 
// Write_Data_WB[ 16 ]
initial
begin
	Write_Data_WB[16] = 1'b0;
	Write_Data_WB[16] = #160000 1'b1;
	Write_Data_WB[16] = #80000 1'b0;
	Write_Data_WB[16] = #80000 1'b1;
	Write_Data_WB[16] = #320000 1'b0;
	Write_Data_WB[16] = #80000 1'b1;
	Write_Data_WB[16] = #400000 1'b0;
	Write_Data_WB[16] = #80000 1'b1;
	Write_Data_WB[16] = #80000 1'b0;
	Write_Data_WB[16] = #160000 1'b1;
	Write_Data_WB[16] = #80000 1'b0;
	Write_Data_WB[16] = #400000 1'b1;
	Write_Data_WB[16] = #240000 1'b0;
	Write_Data_WB[16] = #80000 1'b1;
	Write_Data_WB[16] = #80000 1'b0;
	Write_Data_WB[16] = #80000 1'b1;
	Write_Data_WB[16] = #160000 1'b0;
	Write_Data_WB[16] = #80000 1'b1;
	Write_Data_WB[16] = #80000 1'b0;
	Write_Data_WB[16] = #160000 1'b1;
	Write_Data_WB[16] = #80000 1'b0;
end 
// Write_Data_WB[ 15 ]
initial
begin
	Write_Data_WB[15] = 1'b1;
	Write_Data_WB[15] = #240000 1'b0;
	Write_Data_WB[15] = #80000 1'b1;
	Write_Data_WB[15] = #80000 1'b0;
	Write_Data_WB[15] = #80000 1'b1;
	Write_Data_WB[15] = #160000 1'b0;
	Write_Data_WB[15] = #160000 1'b1;
	Write_Data_WB[15] = #80000 1'b0;
	Write_Data_WB[15] = #160000 1'b1;
	Write_Data_WB[15] = #240000 1'b0;
	Write_Data_WB[15] = #80000 1'b1;
	Write_Data_WB[15] = #80000 1'b0;
	Write_Data_WB[15] = #320000 1'b1;
	Write_Data_WB[15] = #320000 1'b0;
	Write_Data_WB[15] = #160000 1'b1;
	Write_Data_WB[15] = #80000 1'b0;
	Write_Data_WB[15] = #240000 1'b1;
	Write_Data_WB[15] = #80000 1'b0;
	Write_Data_WB[15] = #160000 1'b1;
	Write_Data_WB[15] = #160000 1'b0;
end 
// Write_Data_WB[ 14 ]
initial
begin
	Write_Data_WB[14] = 1'b1;
	Write_Data_WB[14] = #160000 1'b0;
	Write_Data_WB[14] = #400000 1'b1;
	Write_Data_WB[14] = #160000 1'b0;
	Write_Data_WB[14] = #80000 1'b1;
	Write_Data_WB[14] = #320000 1'b0;
	Write_Data_WB[14] = #80000 1'b1;
	Write_Data_WB[14] = #80000 1'b0;
	Write_Data_WB[14] = #80000 1'b1;
	Write_Data_WB[14] = #240000 1'b0;
	Write_Data_WB[14] = #160000 1'b1;
	Write_Data_WB[14] = #80000 1'b0;
	Write_Data_WB[14] = #160000 1'b1;
	Write_Data_WB[14] = #160000 1'b0;
	Write_Data_WB[14] = #80000 1'b1;
	Write_Data_WB[14] = #320000 1'b0;
	Write_Data_WB[14] = #160000 1'b1;
	Write_Data_WB[14] = #160000 1'b0;
	Write_Data_WB[14] = #80000 1'b1;
end 
// Write_Data_WB[ 13 ]
initial
begin
	Write_Data_WB[13] = 1'b1;
	Write_Data_WB[13] = #80000 1'b0;
	Write_Data_WB[13] = #400000 1'b1;
	Write_Data_WB[13] = #80000 1'b0;
	Write_Data_WB[13] = #80000 1'b1;
	Write_Data_WB[13] = #80000 1'b0;
	Write_Data_WB[13] = #80000 1'b1;
	Write_Data_WB[13] = #240000 1'b0;
	Write_Data_WB[13] = #80000 1'b1;
	Write_Data_WB[13] = #80000 1'b0;
	Write_Data_WB[13] = #80000 1'b1;
	Write_Data_WB[13] = #160000 1'b0;
	Write_Data_WB[13] = #160000 1'b1;
	Write_Data_WB[13] = #240000 1'b0;
	Write_Data_WB[13] = #320000 1'b1;
	Write_Data_WB[13] = #160000 1'b0;
	Write_Data_WB[13] = #160000 1'b1;
	Write_Data_WB[13] = #80000 1'b0;
	Write_Data_WB[13] = #80000 1'b1;
	Write_Data_WB[13] = #80000 1'b0;
	Write_Data_WB[13] = #240000 1'b1;
end 
// Write_Data_WB[ 12 ]
initial
begin
	Write_Data_WB[12] = 1'b0;
	Write_Data_WB[12] = #80000 1'b1;
	Write_Data_WB[12] = #240000 1'b0;
	Write_Data_WB[12] = #160000 1'b1;
	Write_Data_WB[12] = #80000 1'b0;
	Write_Data_WB[12] = #80000 1'b1;
	Write_Data_WB[12] = #320000 1'b0;
	Write_Data_WB[12] = #80000 1'b1;
	Write_Data_WB[12] = #160000 1'b0;
	Write_Data_WB[12] = #160000 1'b1;
	Write_Data_WB[12] = #480000 1'b0;
	Write_Data_WB[12] = #80000 1'b1;
	Write_Data_WB[12] = #160000 1'b0;
	Write_Data_WB[12] = #160000 1'b1;
	Write_Data_WB[12] = #320000 1'b0;
	Write_Data_WB[12] = #160000 1'b1;
end 
// Write_Data_WB[ 11 ]
initial
begin
	Write_Data_WB[11] = 1'b1;
	Write_Data_WB[11] = #80000 1'b0;
	Write_Data_WB[11] = #320000 1'b1;
	Write_Data_WB[11] = #80000 1'b0;
	Write_Data_WB[11] = #80000 1'b1;
	Write_Data_WB[11] = #160000 1'b0;
	Write_Data_WB[11] = #160000 1'b1;
	Write_Data_WB[11] = #400000 1'b0;
	Write_Data_WB[11] = #80000 1'b1;
	Write_Data_WB[11] = #320000 1'b0;
	Write_Data_WB[11] = #80000 1'b1;
	Write_Data_WB[11] = #240000 1'b0;
	Write_Data_WB[11] = #400000 1'b1;
	Write_Data_WB[11] = #80000 1'b0;
	Write_Data_WB[11] = #80000 1'b1;
	Write_Data_WB[11] = #160000 1'b0;
	Write_Data_WB[11] = #240000 1'b1;
end 
// Write_Data_WB[ 10 ]
initial
begin
	Write_Data_WB[10] = 1'b1;
	Write_Data_WB[10] = #160000 1'b0;
	Write_Data_WB[10] = #80000 1'b1;
	Write_Data_WB[10] = #80000 1'b0;
	Write_Data_WB[10] = #80000 1'b1;
	Write_Data_WB[10] = #80000 1'b0;
	Write_Data_WB[10] = #80000 1'b1;
	Write_Data_WB[10] = #160000 1'b0;
	Write_Data_WB[10] = #160000 1'b1;
	Write_Data_WB[10] = #80000 1'b0;
	Write_Data_WB[10] = #320000 1'b1;
	Write_Data_WB[10] = #80000 1'b0;
	Write_Data_WB[10] = #80000 1'b1;
	Write_Data_WB[10] = #160000 1'b0;
	Write_Data_WB[10] = #80000 1'b1;
	Write_Data_WB[10] = #240000 1'b0;
	Write_Data_WB[10] = #160000 1'b1;
	Write_Data_WB[10] = #80000 1'b0;
	Write_Data_WB[10] = #80000 1'b1;
	Write_Data_WB[10] = #80000 1'b0;
	Write_Data_WB[10] = #400000 1'b1;
	Write_Data_WB[10] = #80000 1'b0;
end 
// Write_Data_WB[ 9 ]
initial
begin
	Write_Data_WB[9] = 1'b0;
	Write_Data_WB[9] = #80000 1'b1;
	Write_Data_WB[9] = #80000 1'b0;
	Write_Data_WB[9] = #80000 1'b1;
	Write_Data_WB[9] = #80000 1'b0;
	Write_Data_WB[9] = #320000 1'b1;
	Write_Data_WB[9] = #80000 1'b0;
	Write_Data_WB[9] = #160000 1'b1;
	Write_Data_WB[9] = #80000 1'b0;
	Write_Data_WB[9] = #480000 1'b1;
	Write_Data_WB[9] = #80000 1'b0;
	Write_Data_WB[9] = #80000 1'b1;
	Write_Data_WB[9] = #80000 1'b0;
	Write_Data_WB[9] = #160000 1'b1;
	Write_Data_WB[9] = #160000 1'b0;
	Write_Data_WB[9] = #80000 1'b1;
	Write_Data_WB[9] = #320000 1'b0;
	Write_Data_WB[9] = #80000 1'b1;
	Write_Data_WB[9] = #240000 1'b0;
	Write_Data_WB[9] = #160000 1'b1;
	Write_Data_WB[9] = #80000 1'b0;
end 
// Write_Data_WB[ 8 ]
initial
begin
	Write_Data_WB[8] = 1'b1;
	Write_Data_WB[8] = #80000 1'b0;
	Write_Data_WB[8] = #80000 1'b1;
	Write_Data_WB[8] = #160000 1'b0;
	Write_Data_WB[8] = #160000 1'b1;
	Write_Data_WB[8] = #160000 1'b0;
	Write_Data_WB[8] = #80000 1'b1;
	Write_Data_WB[8] = #160000 1'b0;
	Write_Data_WB[8] = #160000 1'b1;
	Write_Data_WB[8] = #240000 1'b0;
	Write_Data_WB[8] = #80000 1'b1;
	Write_Data_WB[8] = #240000 1'b0;
	Write_Data_WB[8] = #80000 1'b1;
	Write_Data_WB[8] = #80000 1'b0;
	Write_Data_WB[8] = #160000 1'b1;
	Write_Data_WB[8] = #400000 1'b0;
	Write_Data_WB[8] = #80000 1'b1;
	Write_Data_WB[8] = #80000 1'b0;
	Write_Data_WB[8] = #80000 1'b1;
	Write_Data_WB[8] = #240000 1'b0;
	Write_Data_WB[8] = #80000 1'b1;
	Write_Data_WB[8] = #80000 1'b0;
end 
// Write_Data_WB[ 7 ]
initial
begin
	Write_Data_WB[7] = 1'b1;
	Write_Data_WB[7] = #80000 1'b0;
	Write_Data_WB[7] = #80000 1'b1;
	Write_Data_WB[7] = #80000 1'b0;
	Write_Data_WB[7] = #80000 1'b1;
	Write_Data_WB[7] = #80000 1'b0;
	Write_Data_WB[7] = #80000 1'b1;
	Write_Data_WB[7] = #80000 1'b0;
	Write_Data_WB[7] = #80000 1'b1;
	Write_Data_WB[7] = #80000 1'b0;
	Write_Data_WB[7] = #160000 1'b1;
	Write_Data_WB[7] = #240000 1'b0;
	Write_Data_WB[7] = #240000 1'b1;
	Write_Data_WB[7] = #160000 1'b0;
	Write_Data_WB[7] = #160000 1'b1;
	Write_Data_WB[7] = #320000 1'b0;
	Write_Data_WB[7] = #160000 1'b1;
	Write_Data_WB[7] = #160000 1'b0;
	Write_Data_WB[7] = #320000 1'b1;
	Write_Data_WB[7] = #80000 1'b0;
	Write_Data_WB[7] = #160000 1'b1;
	Write_Data_WB[7] = #80000 1'b0;
end 
// Write_Data_WB[ 6 ]
initial
begin
	Write_Data_WB[6] = 1'b1;
	Write_Data_WB[6] = #80000 1'b0;
	Write_Data_WB[6] = #160000 1'b1;
	Write_Data_WB[6] = #80000 1'b0;
	Write_Data_WB[6] = #160000 1'b1;
	Write_Data_WB[6] = #80000 1'b0;
	Write_Data_WB[6] = #80000 1'b1;
	Write_Data_WB[6] = #160000 1'b0;
	Write_Data_WB[6] = #240000 1'b1;
	Write_Data_WB[6] = #80000 1'b0;
	Write_Data_WB[6] = #80000 1'b1;
	Write_Data_WB[6] = #240000 1'b0;
	Write_Data_WB[6] = #240000 1'b1;
	Write_Data_WB[6] = #80000 1'b0;
	Write_Data_WB[6] = #160000 1'b1;
	Write_Data_WB[6] = #160000 1'b0;
	Write_Data_WB[6] = #160000 1'b1;
	Write_Data_WB[6] = #80000 1'b0;
	Write_Data_WB[6] = #160000 1'b1;
	Write_Data_WB[6] = #80000 1'b0;
	Write_Data_WB[6] = #160000 1'b1;
	Write_Data_WB[6] = #80000 1'b0;
	Write_Data_WB[6] = #160000 1'b1;
end 
// Write_Data_WB[ 5 ]
initial
begin
	Write_Data_WB[5] = 1'b0;
	Write_Data_WB[5] = #80000 1'b1;
	Write_Data_WB[5] = #160000 1'b0;
	Write_Data_WB[5] = #80000 1'b1;
	Write_Data_WB[5] = #240000 1'b0;
	Write_Data_WB[5] = #80000 1'b1;
	Write_Data_WB[5] = #160000 1'b0;
	Write_Data_WB[5] = #80000 1'b1;
	Write_Data_WB[5] = #80000 1'b0;
	Write_Data_WB[5] = #80000 1'b1;
	Write_Data_WB[5] = #240000 1'b0;
	Write_Data_WB[5] = #400000 1'b1;
	Write_Data_WB[5] = #80000 1'b0;
	Write_Data_WB[5] = #160000 1'b1;
	Write_Data_WB[5] = #240000 1'b0;
	Write_Data_WB[5] = #80000 1'b1;
	Write_Data_WB[5] = #80000 1'b0;
	Write_Data_WB[5] = #80000 1'b1;
	Write_Data_WB[5] = #240000 1'b0;
	Write_Data_WB[5] = #160000 1'b1;
	Write_Data_WB[5] = #80000 1'b0;
	Write_Data_WB[5] = #80000 1'b1;
end 
// Write_Data_WB[ 4 ]
initial
begin
	Write_Data_WB[4] = 1'b1;
	Write_Data_WB[4] = #240000 1'b0;
	Write_Data_WB[4] = #240000 1'b1;
	Write_Data_WB[4] = #80000 1'b0;
	Write_Data_WB[4] = #320000 1'b1;
	Write_Data_WB[4] = #80000 1'b0;
	Write_Data_WB[4] = #80000 1'b1;
	Write_Data_WB[4] = #320000 1'b0;
	Write_Data_WB[4] = #160000 1'b1;
	Write_Data_WB[4] = #80000 1'b0;
	Write_Data_WB[4] = #80000 1'b1;
	Write_Data_WB[4] = #80000 1'b0;
	Write_Data_WB[4] = #160000 1'b1;
	Write_Data_WB[4] = #240000 1'b0;
	Write_Data_WB[4] = #80000 1'b1;
	Write_Data_WB[4] = #240000 1'b0;
	Write_Data_WB[4] = #160000 1'b1;
	Write_Data_WB[4] = #160000 1'b0;
	Write_Data_WB[4] = #80000 1'b1;
	Write_Data_WB[4] = #80000 1'b0;
end 
// Write_Data_WB[ 3 ]
initial
begin
	Write_Data_WB[3] = 1'b0;
	Write_Data_WB[3] = #320000 1'b1;
	Write_Data_WB[3] = #320000 1'b0;
	Write_Data_WB[3] = #160000 1'b1;
	Write_Data_WB[3] = #400000 1'b0;
	Write_Data_WB[3] = #160000 1'b1;
	Write_Data_WB[3] = #80000 1'b0;
	Write_Data_WB[3] = #320000 1'b1;
	Write_Data_WB[3] = #320000 1'b0;
	Write_Data_WB[3] = #80000 1'b1;
	Write_Data_WB[3] = #80000 1'b0;
	Write_Data_WB[3] = #80000 1'b1;
	Write_Data_WB[3] = #240000 1'b0;
	Write_Data_WB[3] = #320000 1'b1;
	Write_Data_WB[3] = #80000 1'b0;
end 
// Write_Data_WB[ 2 ]
initial
begin
	Write_Data_WB[2] = 1'b0;
	Write_Data_WB[2] = #160000 1'b1;
	Write_Data_WB[2] = #160000 1'b0;
	Write_Data_WB[2] = #80000 1'b1;
	Write_Data_WB[2] = #160000 1'b0;
	Write_Data_WB[2] = #80000 1'b1;
	Write_Data_WB[2] = #80000 1'b0;
	Write_Data_WB[2] = #240000 1'b1;
	Write_Data_WB[2] = #160000 1'b0;
	Write_Data_WB[2] = #320000 1'b1;
	Write_Data_WB[2] = #560000 1'b0;
	Write_Data_WB[2] = #320000 1'b1;
	Write_Data_WB[2] = #160000 1'b0;
	Write_Data_WB[2] = #80000 1'b1;
	Write_Data_WB[2] = #80000 1'b0;
	Write_Data_WB[2] = #160000 1'b1;
	Write_Data_WB[2] = #80000 1'b0;
	Write_Data_WB[2] = #80000 1'b1;
end 
// Write_Data_WB[ 1 ]
initial
begin
	Write_Data_WB[1] = 1'b1;
	Write_Data_WB[1] = #160000 1'b0;
	Write_Data_WB[1] = #160000 1'b1;
	Write_Data_WB[1] = #160000 1'b0;
	Write_Data_WB[1] = #80000 1'b1;
	Write_Data_WB[1] = #160000 1'b0;
	Write_Data_WB[1] = #160000 1'b1;
	Write_Data_WB[1] = #160000 1'b0;
	Write_Data_WB[1] = #80000 1'b1;
	Write_Data_WB[1] = #160000 1'b0;
	Write_Data_WB[1] = #160000 1'b1;
	Write_Data_WB[1] = #160000 1'b0;
	Write_Data_WB[1] = #400000 1'b1;
	Write_Data_WB[1] = #80000 1'b0;
	Write_Data_WB[1] = #160000 1'b1;
	Write_Data_WB[1] = #80000 1'b0;
	Write_Data_WB[1] = #240000 1'b1;
	Write_Data_WB[1] = #160000 1'b0;
	Write_Data_WB[1] = #80000 1'b1;
	Write_Data_WB[1] = #80000 1'b0;
end 
// Write_Data_WB[ 0 ]
initial
begin
	Write_Data_WB[0] = 1'b0;
	Write_Data_WB[0] = #160000 1'b1;
	Write_Data_WB[0] = #80000 1'b0;
	Write_Data_WB[0] = #80000 1'b1;
	Write_Data_WB[0] = #80000 1'b0;
	Write_Data_WB[0] = #400000 1'b1;
	Write_Data_WB[0] = #80000 1'b0;
	Write_Data_WB[0] = #80000 1'b1;
	Write_Data_WB[0] = #160000 1'b0;
	Write_Data_WB[0] = #160000 1'b1;
	Write_Data_WB[0] = #80000 1'b0;
	Write_Data_WB[0] = #80000 1'b1;
	Write_Data_WB[0] = #160000 1'b0;
	Write_Data_WB[0] = #80000 1'b1;
	Write_Data_WB[0] = #80000 1'b0;
	Write_Data_WB[0] = #240000 1'b1;
	Write_Data_WB[0] = #80000 1'b0;
	Write_Data_WB[0] = #80000 1'b1;
	Write_Data_WB[0] = #80000 1'b0;
	Write_Data_WB[0] = #160000 1'b1;
	Write_Data_WB[0] = #80000 1'b0;
	Write_Data_WB[0] = #80000 1'b1;
	Write_Data_WB[0] = #160000 1'b0;
end 

MIPS32_vlg_sample_tst tb_sample (
	.Branch_Dest_MEM(Branch_Dest_MEM),
	.CLOCK_50(CLOCK_50),
	.PCSrc_MEM(PCSrc_MEM),
	.RegWrite_WB(RegWrite_WB),
	.Write_Data_WB(Write_Data_WB),
	.Write_Register_WB(Write_Register_WB),
	.sampler_tx(sampler)
);

MIPS32_vlg_check_tst tb_out(
	.ALUOp_EX(ALUOp_EX),
	.ALUSrc_EX(ALUSrc_EX),
	.Branch_EX(Branch_EX),
	.Instruction_EX(Instruction_EX),
	.MemRead_EX(MemRead_EX),
	.MemWrite_EX(MemWrite_EX),
	.MemtoReg_EX(MemtoReg_EX),
	.PC_Plus_4_EX(PC_Plus_4_EX),
	.Read_Data_1_EX(Read_Data_1_EX),
	.Read_Data_2_EX(Read_Data_2_EX),
	.RegDst_EX(RegDst_EX),
	.RegWrite_EX(RegWrite_EX),
	.Sign_Extend_Instruction_EX(Sign_Extend_Instruction_EX),
	.sampler_rx(sampler)
);
endmodule

